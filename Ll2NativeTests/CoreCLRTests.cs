namespace Ll2NativeTests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using Il2Native.Logic;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    namespace @baseservices.@compilerservices.@dynamicobjectproperties
    {
        [TestClass]
        public class @testclass_dynamicobjectproperties
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dev10_535767()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\compilerservices\dynamicobjectproperties", "dev10_535767.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @helper()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\compilerservices\dynamicobjectproperties", "helper.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test448035()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\compilerservices\dynamicobjectproperties", "test448035.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testapis()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\compilerservices\dynamicobjectproperties", "testapis.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testgc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\compilerservices\dynamicobjectproperties", "testgc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testoverrides()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\compilerservices\dynamicobjectproperties", "testoverrides.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@exceptions.@generics
    {
        [TestClass]
        public class @testclass_generics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @genericexceptions01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @genericexceptions02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @genericexceptions03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @genericexceptions04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @genericexceptions05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @genericexceptions06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @genericexceptions07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @genericexceptions08()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "genericexceptions08.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch08()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch08.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch09()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch09.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested_try_catch10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "nested-try-catch10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_finally_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-finally-struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_finally_struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-finally-struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_finally_struct03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-finally-struct03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_finally01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-finally01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_finally02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-finally02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_finally03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-finally03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct08()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct08.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch_struct09()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch-struct09.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch08()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch08.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_catch09()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-catch09.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_finally_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-finally-struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_finally_struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-finally-struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_finally_struct03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-finally-struct03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_finally01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-finally01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_finally02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-finally02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @try_finally03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "try-finally03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeparameter018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\generics", "typeparameter018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@exceptions.@sharedexceptions.@emptystacktrace
    {
        [TestClass]
        public class @testclass_emptystacktrace
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @oomexception01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\sharedexceptions\emptystacktrace", "oomexception01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@exceptions.@simple
    {
        [TestClass]
        public class @testclass_simple
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @finally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\simple", "finally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@exceptions.@unittests
    {
        [TestClass]
        public class @testclass_unittests
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @baseclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "baseclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @innerfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "innerfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rethrowandfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "rethrowandfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @returnfromcatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "returnfromcatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwincatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "throwincatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "throwinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trace()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "trace.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatchinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\exceptions\unittests", "trycatchinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@finalization
    {
        [TestClass]
        public class @testclass_finalization
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @finalizer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\finalization", "finalizer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@currentculture
    {
        [TestClass]
        public class @testclass_currentculture
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @culturechangesecurity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\currentculture", "culturechangesecurity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@generics.@syncdelegate
    {
        [TestClass]
        public class @testclass_syncdelegate
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @thread01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread08()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread08.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread09()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread09.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread19()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread19.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread20()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread20.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread21()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread21.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread22()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread22.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread23()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread23.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread24()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread24.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread25()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread25.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread26()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread26.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread27()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread27.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread28()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread28.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread29()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread29.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread30()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\syncdelegate", "thread30.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@generics.@threadstart
    {
        [TestClass]
        public class @testclass_threadstart
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @thread01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread08()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread08.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread09()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread09.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread19()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread19.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread20()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread20.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread21()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread21.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread22()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread22.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread23()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread23.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread24()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread24.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread25()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread25.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread26()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread26.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread27()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread27.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread28()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread28.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread29()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread29.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @thread30()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\generics\threadstart", "thread30.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@interlocked.@add
    {
        [TestClass]
        public class @testclass_add
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @checkaddint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\add", "checkaddint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @checkaddlong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\add", "checkaddlong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedaddint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\add", "interlockedaddint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedaddlong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\add", "interlockedaddlong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedaddlongwithsubtract()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\add", "interlockedaddlongwithsubtract.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@interlocked.@compareexchange
    {
        [TestClass]
        public class @testclass_compareexchange
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @compareexchangelong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\compareexchange", "compareexchangelong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareexchangetclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\compareexchange", "compareexchangetclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareexchangetstring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\compareexchange", "compareexchangetstring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@interlocked.@exchange
    {
        [TestClass]
        public class @testclass_exchange
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @exchangeint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\exchange", "exchangeint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @exchangelong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\exchange", "exchangelong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @exchangetclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\exchange", "exchangetclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @exchangetstring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\interlocked\exchange", "exchangetstring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@monitor.@enter
    {
        [TestClass]
        public class @testclass_enter
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @enternull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\enter", "enternull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@monitor.@exit
    {
        [TestClass]
        public class @testclass_exit
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @exitnull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\exit", "exitnull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@monitor.@pulse
    {
        [TestClass]
        public class @testclass_pulse
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @pulsenull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\pulse", "pulsenull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@monitor.@pulseall
    {
        [TestClass]
        public class @testclass_pulseall
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @pulseallnull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\pulseall", "pulseallnull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@monitor.@unownedlock
    {
        [TestClass]
        public class @testclass_unownedlock
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @enterexitexit()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\unownedlock", "enterexitexit.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @noenterobject()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\unownedlock", "noenterobject.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @noenterobjectnew()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\unownedlock", "noenterobjectnew.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @noentervaltype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\monitor\unownedlock", "noentervaltype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@paramthreadstart
    {
        [TestClass]
        public class @testclass_paramthreadstart
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @threadstartbool()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartbool.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartcast()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartcast.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartchar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartchar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartdecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartdecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartdelegate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartdelegate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartdouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartdouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartfloat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartfloat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartgenerics()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartgenerics.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartlong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartlong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartneg1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartneg1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartneg3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartneg3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartneg4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartneg4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartnull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartnull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartnull2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartnull2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartobject()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartobject.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartoperations()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartoperations.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartsbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartsbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartshort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartshort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartstring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartstring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartuint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartuint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartulong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartulong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstartushort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\paramthreadstart", "threadstartushort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@readerwriterlockslim
    {
        [TestClass]
        public class @testclass_readerwriterlockslim
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @singlereleasewriteddbug71632()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\readerwriterlockslim", "singlereleasewriteddbug71632.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryenterfailureddbugs124485()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\readerwriterlockslim", "tryenterfailureddbugs124485.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @upgrader()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\readerwriterlockslim", "upgrader.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@threading.@threadstatic
    {
        [TestClass]
        public class @testclass_threadstatic
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @threadstatic01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\threadstatic", "threadstatic01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstatic02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\threadstatic", "threadstatic02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstatic03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\threadstatic", "threadstatic03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstatic04helper()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\threadstatic", "threadstatic04helper.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstatic05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\threadstatic", "threadstatic05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @threadstatic06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\threading\threadstatic", "threadstatic06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @baseservices.@visibility
    {
        [TestClass]
        public class @testclass_visibility
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @target()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"baseservices\visibility", "target.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Common.@Coreclr_TestWrapper
    {
        [TestClass]
        public class @testclass_Coreclr_TestWrapper
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @CoreclrTestWrapperLib()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\Coreclr.TestWrapper", "CoreclrTestWrapperLib.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Common.@CoreCLRTestLibrary
    {
        [TestClass]
        public class @testclass_CoreCLRTestLibrary
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @CalendarHelpers()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary", "CalendarHelpers.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @EndianessChecker()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary", "EndianessChecker.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary", "Generator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GlobLocHelper()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary", "GlobLocHelper.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Logging()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary", "Logging.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @TestFramework()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary", "TestFramework.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Utilities()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary", "Utilities.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@components.@fileversioninfo
    {
        [TestClass]
        public class @testclass_fileversioninfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assembly1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\components\fileversioninfo", "assembly1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@components.@stopwatch
    {
        [TestClass]
        public class @testclass_stopwatch
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @co9600ctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\components\stopwatch", "co9600ctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @co9604get_isrunning()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\components\stopwatch", "co9604get_isrunning.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@action
    {
        [TestClass]
        public class @testclass_action
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @actionctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\action", "actionctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @actioninvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\action", "actioninvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@activator
    {
        [TestClass]
        public class @testclass_activator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @activatorcreateinstance2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\activator", "activatorcreateinstance2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@argumentexception
    {
        [TestClass]
        public class @testclass_argumentexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @argumentexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\argumentexception", "argumentexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@argumentnullexception
    {
        [TestClass]
        public class @testclass_argumentnullexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @argumentnullexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\argumentnullexception", "argumentnullexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@argumentoutofrangeexception
    {
        [TestClass]
        public class @testclass_argumentoutofrangeexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @argumentoutofrangeexceptionctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\argumentoutofrangeexception", "argumentoutofrangeexceptionctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @argumentoutofrangeexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\argumentoutofrangeexception", "argumentoutofrangeexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@arithmeticexception
    {
        [TestClass]
        public class @testclass_arithmeticexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arithmeticexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\arithmeticexception", "arithmeticexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@array
    {
        [TestClass]
        public class @testclass_array
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arraybinarysearch1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch3b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch3b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch4b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch4b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch5b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch5b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraybinarysearch6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraybinarysearch6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayclone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayclone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraycopy1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraycopy1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraycopy2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraycopy2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraycopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraycopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraycreateinstance1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraycreateinstance1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraycreateinstance1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraycreateinstance1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraycreateinstance2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraycreateinstance2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraycreateinstance2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraycreateinstance2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetlength()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetlength.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetlowerbound()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetlowerbound.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetupperbound()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetupperbound.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetvalue1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetvalue1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetvalue2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetvalue2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraygetvalue2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraygetvalue2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayicollectionget_count()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayicollectionget_count.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistcontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistcontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistget_item()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistget_item.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistindexof()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistindexof.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistinsert()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistinsert.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistremoveat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistremoveat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayilistset_item()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayilistset_item.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof3b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof3b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayindexof4b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayindexof4b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayinitialize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayinitialize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylastindexof1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylastindexof1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylastindexof1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylastindexof1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylastindexof2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylastindexof2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylastindexof2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylastindexof2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylastindexof3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylastindexof3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylastindexof3b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylastindexof3b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylastindexof4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylastindexof4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraylength()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraylength.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayrank()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayrank.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayreserse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayreserse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayreserse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayreserse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayreverse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayreverse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayreverse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arrayreverse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysetvalue1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysetvalue1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysetvalue1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysetvalue1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysetvalue2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysetvalue2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysetvalue2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysetvalue2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort3b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort3b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraysort9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\array", "arraysort9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@arraytypemismatchexception
    {
        [TestClass]
        public class @testclass_arraytypemismatchexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arraytypemismatchexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\arraytypemismatchexception", "arraytypemismatchexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraytypemismatchexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\arraytypemismatchexception", "arraytypemismatchexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arraytypemismatchexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\arraytypemismatchexception", "arraytypemismatchexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@attribute
    {
        [TestClass]
        public class @testclass_attribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ddb125472_gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attribute", "ddb125472_gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attribute", "gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@attributetargets
    {
        [TestClass]
        public class @testclass_attributetargets
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @attributetargetsall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsassembly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsassembly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsconstructor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsconstructor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsdelegate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsdelegate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsenum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsenum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsevent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsevent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsfield()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsfield.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsgenericparameter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsgenericparameter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsinterface()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsinterface.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsmethod()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsmethod.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsmodule()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsmodule.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsparameter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsparameter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsproperty()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsproperty.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsreturnvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsreturnvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributetargetsstruct()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributetargets", "attributetargetsstruct.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@attributeusageattribute
    {
        [TestClass]
        public class @testclass_attributeusageattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @attributeusageattributeallowmultiple()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributeusageattribute", "attributeusageattributeallowmultiple.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @attributeusageattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\attributeusageattribute", "attributeusageattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@badimageformatexception
    {
        [TestClass]
        public class @testclass_badimageformatexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @badimageformatexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\badimageformatexception", "badimageformatexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @badimageformatexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\badimageformatexception", "badimageformatexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @badimageformatexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\badimageformatexception", "badimageformatexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @badimageformatexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\badimageformatexception", "badimageformatexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @badimageformatexceptiontostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\badimageformatexception", "badimageformatexceptiontostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@boolean
    {
        [TestClass]
        public class @testclass_boolean
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @booleancompareto_boolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleancompareto_boolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleanequals_boolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleanequals_boolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleanequals_object()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleanequals_object.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleanfalsestring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleanfalsestring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleangethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleangethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleaniconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleaniconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleanparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleanparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleantostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleantostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleantruestring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleantruestring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @booleantryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\boolean", "booleantryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@byte
    {
        [TestClass]
        public class @testclass_byte
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @byteequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @bytegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "bytegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteiconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteiconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @bytemaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "bytemaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteparse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteparse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byteparse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "byteparse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @bytetostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "bytetostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @bytetostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "bytetostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @bytetostring4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "bytetostring4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @bytetryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\byte", "bytetryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@char
    {
        [TestClass]
        public class @testclass_char
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @charcompateto1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charcompateto1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chargethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chargethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariscontrol1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariscontrol1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariscontrol2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariscontrol2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisdigit1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisdigit1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisdigit2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisdigit2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisletter1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisletter1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisletter2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisletter2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisletterordigit1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisletterordigit1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisletterordigit2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisletterordigit2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charislower1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charislower1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charislower2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charislower2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisnumber1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisnumber1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisnumber2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisnumber2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charispunctuation2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charispunctuation2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisseparator1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisseparator1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisseparator2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisseparator2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charissurrogate1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charissurrogate1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charissurrogate2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charissurrogate2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charissurrogatepair1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charissurrogatepair1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charissurrogatepair2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charissurrogatepair2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charissymbol1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charissymbol1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisupper1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisupper1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charisupper2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charisupper2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariswhitespace1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariswhitespace1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chariswhitespace2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chariswhitespace2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charmaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charmaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "charminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chartostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chartostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chartostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chartostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chartryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\char", "chartryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@charenumerator
    {
        [TestClass]
        public class @testclass_charenumerator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @charenumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\charenumerator", "charenumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charenumeratorienumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\charenumerator", "charenumeratorienumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charenumeratorienumgetcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\charenumerator", "charenumeratorienumgetcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charenumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\charenumerator", "charenumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charenumeratorreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\charenumerator", "charenumeratorreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@clscompliantattribute
    {
        [TestClass]
        public class @testclass_clscompliantattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @clscompliantattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\clscompliantattribute", "clscompliantattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @clscompliantattributeiscompliant()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\clscompliantattribute", "clscompliantattributeiscompliant.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@dictionaryentry
    {
        [TestClass]
        public class @testclass_dictionaryentry
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dictionaryentryctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\dictionaryentry", "dictionaryentryctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryentrykey()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\dictionaryentry", "dictionaryentrykey.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryentryvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\dictionaryentry", "dictionaryentryvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@comparer
    {
        [TestClass]
        public class @testclass_comparer
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @comparercompare1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\comparer", "comparercompare1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @comparercompare2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\comparer", "comparercompare2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @comparerctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\comparer", "comparerctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @comparerdefault()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\comparer", "comparerdefault.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@dictionary
    {
        [TestClass]
        public class @testclass_dictionary
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dictionaryadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarycomparer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionarycomparer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarycontainskey()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionarycontainskey.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarycontainsvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionarycontainsvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarycount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionarycount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryctor4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryctor4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryctor5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryctor5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryctor6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryctor6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarygetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionarygetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectioncontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectioncontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectioncopyto2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectioncopyto2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionisreadonly2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionisreadonly2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionissynchronized()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionissynchronized.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionissynchronized2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionissynchronized2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionsyncroot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionsyncroot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryicollectionsyncroot2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryicollectionsyncroot2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionarycontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionarycontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionarygetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionarygetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryisfixedsize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryisfixedsize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryisfixedsize2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryisfixedsize2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryisreadonly2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryisreadonly2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryitem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryitem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryitem2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryitem2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionarykeys()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionarykeys.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionarykeys2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionarykeys2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionarykeys3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionarykeys3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionarykeys4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionarykeys4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryvalue2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryvalue2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryvalue3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryvalue3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryvalue4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryvalue4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryidictionaryvalues()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryidictionaryvalues.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryienumerablegetenumerator2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryienumerablegetenumerator2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionaryremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarytrygetvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionary", "dictionarytrygetvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@dictionaryenumerator
    {
        [TestClass]
        public class @testclass_dictionaryenumerator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dictionaryenumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryenumeratordispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratordispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryenumeratoridictionaryenumeratorget_entry()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratoridictionaryenumeratorget_entry.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryenumeratoridictionaryenumeratorget_key()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratoridictionaryenumeratorget_key.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryenumeratoridictionaryenumeratorget_value()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratoridictionaryenumeratorget_value.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryenumeratorienumeratorget_current()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratorienumeratorget_current.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryenumeratorienumeratorreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratorienumeratorreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryenumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryenumerator", "dictionaryenumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@dictionarykeycollection
    {
        [TestClass]
        public class @testclass_dictionarykeycollection
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @keycollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "keycollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keycollectioncount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "keycollectioncount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keycollectionctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "keycollectionctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keycollectiongetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "keycollectiongetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsgenericicollectionadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsgenericicollectionadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsgenericicollectionclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsgenericicollectionclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsgenericicollectioncontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsgenericicollectioncontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsgenericicollectionisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsgenericicollectionisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsgenericicollectionremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsgenericicollectionremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsgenericienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsgenericienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsicollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsicollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsicollectionissynchronized()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsicollectionissynchronized.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsicollectionsyncroot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsicollectionsyncroot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionarykeycollection", "systemcollectionsienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@dictionaryvaluecollection
    {
        [TestClass]
        public class @testclass_dictionaryvaluecollection
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dictionaryvaluecollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "dictionaryvaluecollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectioncount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "dictionaryvaluecollectioncount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectionctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "dictionaryvaluecollectionctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectiongetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "dictionaryvaluecollectiongetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsicollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "systemcollectionsicollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsicollectionissynchronized()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "systemcollectionsicollectionissynchronized.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @systemcollectionsicollectionsyncroot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "systemcollectionsicollectionsyncroot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectiongenericicollectionadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "valuecollectiongenericicollectionadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectiongenericicollectionclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "valuecollectiongenericicollectionclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectiongenericicollectioncontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "valuecollectiongenericicollectioncontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectiongenericicollectionisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "valuecollectiongenericicollectionisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectiongenericicollectionremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "valuecollectiongenericicollectionremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectiongenericienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "valuecollectiongenericienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectionienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictionaryvaluecollection", "valuecollectionienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@dictkeycollenum
    {
        [TestClass]
        public class @testclass_dictkeycollenum
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dictionarykeycollectionenumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "dictionarykeycollectionenumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarykeycollectionenumeratordispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "dictionarykeycollectionenumeratordispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionarykeycollectionenumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "dictionarykeycollectionenumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectionenumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "dictionaryvaluecollectionenumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectionenumeratordispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "dictionaryvaluecollectionenumeratordispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectionenumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "dictionaryvaluecollectionenumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keycollectionenumeratorienumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "keycollectionenumeratorienumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keycollectionenumeratorienumeratorreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "keycollectionenumeratorienumeratorreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectionenumeratorienumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "valuecollectionenumeratorienumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectionenumeratorienumeratorreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictkeycollenum", "valuecollectionenumeratorienumeratorreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@dictvalcollenum
    {
        [TestClass]
        public class @testclass_dictvalcollenum
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dictionaryvaluecollectionenumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictvalcollenum", "dictionaryvaluecollectionenumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectionenumeratordispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictvalcollenum", "dictionaryvaluecollectionenumeratordispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dictionaryvaluecollectionenumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictvalcollenum", "dictionaryvaluecollectionenumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectionenumeratorienumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictvalcollenum", "valuecollectionenumeratorienumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuecollectionenumeratorienumeratorreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\dictvalcollenum", "valuecollectionenumeratorienumeratorreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@equalitycomparer
    {
        [TestClass]
        public class @testclass_equalitycomparer
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @equalitycomparerequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\equalitycomparer", "equalitycomparerequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @equalitycomparergethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\equalitycomparer", "equalitycomparergethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @equlitycomparerdefault()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\equalitycomparer", "equlitycomparerdefault.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@icollection
    {
        [TestClass]
        public class @testclass_icollection
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @icollectionadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\icollection", "icollectionadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectionclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\icollection", "icollectionclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectioncontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\icollection", "icollectioncontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\icollection", "icollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectioncount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\icollection", "icollectioncount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectionisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\icollection", "icollectionisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectionremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\icollection", "icollectionremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@idictionary
    {
        [TestClass]
        public class @testclass_idictionary
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @idictionarycontainskey()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\idictionary", "idictionarycontainskey.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionaryitem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\idictionary", "idictionaryitem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionarykeys()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\idictionary", "idictionarykeys.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionarytrygetvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\idictionary", "idictionarytrygetvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionaryvalues()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\idictionary", "idictionaryvalues.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@ienumerable
    {
        [TestClass]
        public class @testclass_ienumerable
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\ienumerable", "ienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@ienumerator
    {
        [TestClass]
        public class @testclass_ienumerator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ienumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\ienumerator", "ienumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@iequalitycomparer
    {
        [TestClass]
        public class @testclass_iequalitycomparer
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @iequalitycomparerequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\iequalitycomparer", "iequalitycomparerequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iequalitycomparergethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\iequalitycomparer", "iequalitycomparergethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@ilist
    {
        [TestClass]
        public class @testclass_ilist
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ilistindexof()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\ilist", "ilistindexof.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ilistinsert()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\ilist", "ilistinsert.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ilistitem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\ilist", "ilistitem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ilistremoveat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\ilist", "ilistremoveat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@keynotfoundexception
    {
        [TestClass]
        public class @testclass_keynotfoundexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @keynotfoundexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\keynotfoundexception", "keynotfoundexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keynotfoundexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\keynotfoundexception", "keynotfoundexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@keyvaluepair
    {
        [TestClass]
        public class @testclass_keyvaluepair
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @keyvaluepairctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\keyvaluepair", "keyvaluepairctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keyvaluepairkey()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\keyvaluepair", "keyvaluepairkey.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keyvaluepairtostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\keyvaluepair", "keyvaluepairtostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @keyvaluepairvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\keyvaluepair", "keyvaluepairvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@list
    {
        [TestClass]
        public class @testclass_list
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @binarysearch1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "binarysearch1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @binarysearch2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "binarysearch2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @binarysearch3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "binarysearch3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @copyto1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "copyto1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @copyto2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "copyto2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @copyto3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "copyto3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listaddrange()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listaddrange.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listcapacity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listcapacity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listcontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listcontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listforeach()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listforeach.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listgetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listgetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listgetrange()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listgetrange.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listicollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listicollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listicollectionisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listicollectionisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listicollectionissynchronized()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listicollectionissynchronized.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listicollectionsyncroot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listicollectionsyncroot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listienumerablegetenumerator2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listienumerablegetenumerator2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistcontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistcontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistindexof()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistindexof.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistinsert()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistinsert.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistisfixedsize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistisfixedsize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistitem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistitem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listilistremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listilistremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listindexof1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listindexof1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listindexof2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listindexof2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listindexof3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listindexof3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listinsertrange_cs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listinsertrange.cs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listlastindexof1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listlastindexof1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listlastindexof2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listlastindexof2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listlastindexof3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listlastindexof3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listremoveat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listremoveat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listremoverange()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listremoverange.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listreverse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listreverse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listreverse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listreverse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listtoarray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listtoarray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @listtrimexcess()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\list", "listtrimexcess.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@queue
    {
        [TestClass]
        public class @testclass_queue
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @queueclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queueclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuecontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuecontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuecopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuecopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuecount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuecount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuector1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuector1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuector2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuector2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuector3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuector3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuedequeue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuedequeue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queueenqueue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queueenqueue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuepeek()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuepeek.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @queuetoarray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queue", "queuetoarray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@queueenumerator
    {
        [TestClass]
        public class @testclass_queueenumerator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @enumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queueenumerator", "enumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumeratordispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queueenumerator", "enumeratordispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\queueenumerator", "enumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@stack
    {
        [TestClass]
        public class @testclass_stack
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stackclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackcontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackcontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackcopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackcopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackgetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackgetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackpeek()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackpeek.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackpop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackpop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackpush()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stackpush.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stacktoarray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stack", "stacktoarray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@generic.@stackenumerator
    {
        [TestClass]
        public class @testclass_stackenumerator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stackenumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stackenumerator", "stackenumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackenumeratordispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stackenumerator", "stackenumeratordispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackenumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\generic\stackenumerator", "stackenumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@icollection
    {
        [TestClass]
        public class @testclass_icollection
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @icollectioncopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\icollection", "icollectioncopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectioncount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\icollection", "icollectioncount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectionissynchronized()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\icollection", "icollectionissynchronized.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @icollectionsyncroot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\icollection", "icollectionsyncroot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@icomparer
    {
        [TestClass]
        public class @testclass_icomparer
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @icomparercompare()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\icomparer", "icomparercompare.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@idictionary
    {
        [TestClass]
        public class @testclass_idictionary
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @idictionaryadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\idictionary", "idictionaryadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionaryclear()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\idictionary", "idictionaryclear.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionarycontains()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\idictionary", "idictionarycontains.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionarygetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\idictionary", "idictionarygetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionaryisfixedsize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\idictionary", "idictionaryisfixedsize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionaryisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\idictionary", "idictionaryisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @idictionaryremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\idictionary", "idictionaryremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@ienumerator
    {
        [TestClass]
        public class @testclass_ienumerator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ienumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\ienumerator", "ienumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ienumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\ienumerator", "ienumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ienumeratorreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\ienumerator", "ienumeratorreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@collections.@ilist
    {
        [TestClass]
        public class @testclass_ilist
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ilistisfixedsize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\ilist", "ilistisfixedsize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ilistitem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\collections\ilist", "ilistitem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@comparison
    {
        [TestClass]
        public class @testclass_comparison
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @comparisonbegininvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\comparison", "comparisonbegininvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @comparisonendinvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\comparison", "comparisonendinvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @comparisoninvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\comparison", "comparisoninvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@console
    {
        [TestClass]
        public class @testclass_console
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @consoleseterror()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\console", "consoleseterror.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @consolesetout()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\console", "consolesetout.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@convert
    {
        [TestClass]
        public class @testclass_convert
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @convertchangetype2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "convertchangetype2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @convertfrombase64chararray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "convertfrombase64chararray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @convertfrombase64string()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "convertfrombase64string.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobase64chararray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobase64chararray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobase64string1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobase64string1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobase64string2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobase64string2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoboolean2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoboolean2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoboolean4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoboolean4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoboolean5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoboolean5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoboolean6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoboolean6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoboolean7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoboolean7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoboolean8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoboolean8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttobyte8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttobyte8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttochar9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttochar9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodecimal9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodecimal9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttodouble9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttodouble9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint16_9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint16_9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint32_9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint32_9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttoint64_9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttoint64_9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosbyte9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosbyte9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosingle13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosingle13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosingle14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosingle14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosingle15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosingle15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosingle16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosingle16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttosingle17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttosingle17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring19()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring19.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring20()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring20.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring21()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring21.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring22()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring22.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring23()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring23.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring24()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring24.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring25()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring25.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring28()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring28.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring29()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring29.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring30()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring30.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring31()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring31.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring33()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring33.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttostring9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttostring9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint161()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint161.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1610()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1610.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1611()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1611.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1612()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1612.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1613()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1613.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1614()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1614.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1615()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1615.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1616()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1616.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1617()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1617.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint1618()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint1618.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint162()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint162.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint163()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint163.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint164()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint164.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint165()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint165.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint166()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint166.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint167()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint167.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint168()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint168.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint169()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint169.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint321()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint321.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3210()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3210.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3211()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3211.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3212()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3212.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3213()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3213.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3215()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3215.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3216()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3216.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3217()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3217.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3218()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3218.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint3219()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint3219.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint322()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint322.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint323()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint323.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint324()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint324.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint325()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint325.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint326()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint326.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint327()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint327.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint328()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint328.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint329()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint329.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint641()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint641.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6410()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6410.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6411()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6411.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6412()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6412.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6413()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6413.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6414()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6414.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6415()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6415.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6416()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6416.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6417()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6417.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint6418()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint6418.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint642()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint642.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint643()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint643.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint644()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint644.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint645()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint645.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint646()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint646.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint647()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint647.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint648()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint648.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @converttouint649()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\convert", "converttouint649.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@datetime
    {
        [TestClass]
        public class @testclass_datetime
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @cfdatetimetools()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "cfdatetimetools.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimecompare()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimecompare.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimecompareto1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimecompareto1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimector1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimector1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimector3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimector3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimector4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimector4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimector6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimector6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimector7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimector7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimedate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimedate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimehour()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimehour.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimekind()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimekind.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimemaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimemaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimemillisecond()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimemillisecond.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeminute()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeminute.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimenow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimenow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeparse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeparse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeparse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeparse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeparse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeparse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeparseexact1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeparseexact1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeparseexact2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeparseexact2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeparseexact3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeparseexact3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimesecond()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimesecond.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimesubtract1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimesubtract1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimesubtract2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimesubtract2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeticks()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeticks.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetimeofday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetimeofday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetoday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetoday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetofiletime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetofiletime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetofiletimeutc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetofiletimeutc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetolocaltime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetolocaltime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimetostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimetostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeutcnow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetime", "datetimeutcnow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@datetimekind
    {
        [TestClass]
        public class @testclass_datetimekind
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @datetimekindlocal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetimekind", "datetimekindlocal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimekindunspecified()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetimekind", "datetimekindunspecified.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimekindutc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\datetimekind", "datetimekindutc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@dayofweek
    {
        [TestClass]
        public class @testclass_dayofweek
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dayofweekfriday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dayofweek", "dayofweekfriday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dayofweekmonday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dayofweek", "dayofweekmonday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dayofweeksaturday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dayofweek", "dayofweeksaturday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dayofweeksunday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dayofweek", "dayofweeksunday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dayofweekthursday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dayofweek", "dayofweekthursday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dayofweektuesday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dayofweek", "dayofweektuesday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dayofweekwednesday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dayofweek", "dayofweekwednesday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@decimal
    {
        [TestClass]
        public class @testclass_decimal
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @decimafloor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimafloor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaladd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaladd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalcompare()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalcompare.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalctor8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalctor8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaldivide()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaldivide.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalequals3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalequals3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalgetbits()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalgetbits.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalmaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalmaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalminusone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalminusone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalmultiply()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalmultiply.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalnegate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalnegate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalparse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalparse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalparse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalparse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalparse4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalparse4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalremainder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalremainder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalsubtract()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalsubtract.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltobyte1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltobyte1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltostring4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltostring4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltruncate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltruncate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimaltryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimaltryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalzero()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\decimal", "decimalzero.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@delegate
    {
        [TestClass]
        public class @testclass_delegate
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @delegatecombine1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "delegatecombine1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @delegatecombineimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "delegatecombineimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @delegateequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "delegateequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @delegategethashcode1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "delegategethashcode1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @delegategetinvocationlist1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "delegategetinvocationlist1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @delegateremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "delegateremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @delegateremoveimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "delegateremoveimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testforotherassembly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\delegate", "testforotherassembly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@diagnostics.@conditionalattribute
    {
        [TestClass]
        public class @testclass_conditionalattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @conditionalattributeconditionstring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\diagnostics\conditionalattribute", "conditionalattributeconditionstring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @conditionalattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\diagnostics\conditionalattribute", "conditionalattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@diagnostics.@debuggingmodes
    {
        [TestClass]
        public class @testclass_debuggingmodes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @debuggingmodesdefault()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\diagnostics\debuggingmodes", "debuggingmodesdefault.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @debuggingmodesdisableoptimizations()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\diagnostics\debuggingmodes", "debuggingmodesdisableoptimizations.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @debuggingmodesenableeditandcontinue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\diagnostics\debuggingmodes", "debuggingmodesenableeditandcontinue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @debuggingmodesignoresymbolstoresequencepoints()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\diagnostics\debuggingmodes", "debuggingmodesignoresymbolstoresequencepoints.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @debuggingmodesnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\diagnostics\debuggingmodes", "debuggingmodesnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@dividebyzeroexception
    {
        [TestClass]
        public class @testclass_dividebyzeroexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dividebyzeroexceptionctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dividebyzeroexception", "dividebyzeroexceptionctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dividebyzeroexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dividebyzeroexception", "dividebyzeroexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dividebyzeroexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dividebyzeroexception", "dividebyzeroexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@dllnotfoundexception
    {
        [TestClass]
        public class @testclass_dllnotfoundexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dllnotfoundexception1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dllnotfoundexception", "dllnotfoundexception1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dllnotfoundexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dllnotfoundexception", "dllnotfoundexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dllnotfoundexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\dllnotfoundexception", "dllnotfoundexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@double
    {
        [TestClass]
        public class @testclass_double
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @doublecompareto1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doublecompareto1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleepsilon()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleepsilon.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doublegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doublegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleiconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleiconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleisinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleisinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleisnan()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleisnan.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleisnegativeinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleisnegativeinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleispositiveinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleispositiveinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doublemaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doublemaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doublenan()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doublenan.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doublenegativeinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doublenegativeinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubleparse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubleparse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doublepositiveinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doublepositiveinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubletostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubletostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubletostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubletostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubletostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubletostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubletostring4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubletostring4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doubletryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\double", "doubletryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@enum
    {
        [TestClass]
        public class @testclass_enum
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @enumiconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumiconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumiconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumiconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumiconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumiconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumiconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumiconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumiconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumiconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumiconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumiconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumisdefined()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumisdefined.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumtoobjectb()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumtoobjectb.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumtostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumtostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @enumtostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\enum", "enumtostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@environment
    {
        [TestClass]
        public class @testclass_environment
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @environmentnewline()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\environment", "environmentnewline.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@eventargs
    {
        [TestClass]
        public class @testclass_eventargs
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @eventargsctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\eventargs", "eventargsctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@eventhandler
    {
        [TestClass]
        public class @testclass_eventhandler
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @eventhandlerinvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\eventhandler", "eventhandlerinvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@eventhandler_generic
    {
        [TestClass]
        public class @testclass_eventhandler_generic
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @eventhandlerbegininvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\eventhandler_generic", "eventhandlerbegininvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @eventhandlerctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\eventhandler_generic", "eventhandlerctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @eventhandlerendinvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\eventhandler_generic", "eventhandlerendinvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @eventhandlerinvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\eventhandler_generic", "eventhandlerinvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@exception
    {
        [TestClass]
        public class @testclass_exception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @exceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\exception", "exceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @exceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\exception", "exceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @exceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\exception", "exceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @exceptiongetbaseexception()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\exception", "exceptiongetbaseexception.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@flagsattribute
    {
        [TestClass]
        public class @testclass_flagsattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @flagsattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\flagsattribute", "flagsattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@formatexception
    {
        [TestClass]
        public class @testclass_formatexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @formatexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\formatexception", "formatexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @formatexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\formatexception", "formatexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @formatexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\formatexception", "formatexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@gc
    {
        [TestClass]
        public class @testclass_gc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @gccollect()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\gc", "gccollect.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcgettotalmemory()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\gc", "gcgettotalmemory.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gckeepalive()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\gc", "gckeepalive.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcmaxgeneration()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\gc", "gcmaxgeneration.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcreregisterforfinalize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\gc", "gcreregisterforfinalize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcsuppressfinalize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\gc", "gcsuppressfinalize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcwaitforpendingfinalizers()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\gc", "gcwaitforpendingfinalizers.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@calendarweekrule
    {
        [TestClass]
        public class @testclass_calendarweekrule
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @calendarweekrulefirstday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\calendarweekrule", "calendarweekrulefirstday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @calendarweekrulefirstfourdayweek()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\calendarweekrule", "calendarweekrulefirstfourdayweek.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @calendarweekrulefirstfullweek()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\calendarweekrule", "calendarweekrulefirstfullweek.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@charunicodeinfo
    {
        [TestClass]
        public class @testclass_charunicodeinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @charunicodeinfogetnumericvalue1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\charunicodeinfo", "charunicodeinfogetnumericvalue1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charunicodeinfogetnumericvalue2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\charunicodeinfo", "charunicodeinfogetnumericvalue2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charunicodeinfogetunicodecategory1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\charunicodeinfo", "charunicodeinfogetunicodecategory1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @charunicodeinfogetunicodecategory2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\charunicodeinfo", "charunicodeinfogetunicodecategory2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@compareinfo
    {
        [TestClass]
        public class @testclass_compareinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @compareinfocompare2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareinfo", "compareinfocompare2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareinfoindexof2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareinfo", "compareinfoindexof2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@compareoptions
    {
        [TestClass]
        public class @testclass_compareoptions
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @compareoptionsignorecase()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsignorecase.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsignorekanatype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsignorekanatype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsignorenonspace()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsignorenonspace.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsignoresymbols()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsignoresymbols.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsignorewidth()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsignorewidth.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsordinal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsordinal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsordinaligorecase()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsordinaligorecase.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @compareoptionsstringsort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\compareoptions", "compareoptionsstringsort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@cultureinfo
    {
        [TestClass]
        public class @testclass_cultureinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @cultureinfoclone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfoclone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfoenglishname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfoenglishname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfoequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfoequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfogetcultureinfo2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfogetcultureinfo2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfogethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfogethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfoinvariantculture()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfoinvariantculture.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfoisneutralculture()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfoisneutralculture.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfoname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfoname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfonativename()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfonativename.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfoparent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfoparent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinforeadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinforeadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfotextinfo()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfotextinfo.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfotostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfotostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cultureinfotwoletterisolanguagename()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\cultureinfo", "cultureinfotwoletterisolanguagename.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@datetimeformatinfo
    {
        [TestClass]
        public class @testclass_datetimeformatinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @datetimeformatinfoclone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfoclone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfocurrentinfo()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfocurrentinfo.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfogetabbreviateddayname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfogetabbreviateddayname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfogetabbreviatedmonthname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfogetabbreviatedmonthname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfogetdayname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfogetdayname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfogetformat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfogetformat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfogetinstance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfogetinstance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfogetmonthname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfogetmonthname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfoinvariantinfo()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfoinvariantinfo.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfoisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfoisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinforeadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinforeadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinforfc1123pattern()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinforfc1123pattern.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfosortabledatetimepattern()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfosortabledatetimepattern.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimeformatinfouniversalsortabledatetimepattern()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimeformatinfo", "datetimeformatinfouniversalsortabledatetimepattern.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@datetimestyles
    {
        [TestClass]
        public class @testclass_datetimestyles
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @datetimestyleallowinnerwhite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestyleallowinnerwhite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesadjusttouniversal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesadjusttouniversal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesallowleadingwhite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesallowleadingwhite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesallowtrailingwhite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesallowtrailingwhite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesallowwhitespaces()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesallowwhitespaces.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesassumelocal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesassumelocal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesassumeuniversal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesassumeuniversal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesnocurrentdatedefault()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesnocurrentdatedefault.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @datetimestylesroundtripkind()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\datetimestyles", "datetimestylesroundtripkind.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@numberformatinfo
    {
        [TestClass]
        public class @testclass_numberformatinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @numberformatinfoclone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberformatinfo", "numberformatinfoclone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberformatinfoctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberformatinfo", "numberformatinfoctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberformatinfocurrencydecimalseparator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberformatinfo", "numberformatinfocurrencydecimalseparator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberformatinfocurrencygroupseparator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberformatinfo", "numberformatinfocurrencygroupseparator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberformatinfogetformat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberformatinfo", "numberformatinfogetformat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberformatinfogetinstance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberformatinfo", "numberformatinfogetinstance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberformatinforeadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberformatinfo", "numberformatinforeadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@numberstyles
    {
        [TestClass]
        public class @testclass_numberstyles
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @numberstylesallowcurrencysymbol()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowcurrencysymbol.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowdecimalpoint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowdecimalpoint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowexponent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowexponent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowhexspecifier()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowhexspecifier.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowleadingsign()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowleadingsign.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowleadingwhite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowleadingwhite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowparentheses()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowparentheses.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowthousands()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowthousands.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowtrailingsign()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowtrailingsign.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesallowtrailingwhite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesallowtrailingwhite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesany()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesany.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylescurrency()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylescurrency.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesfloat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesfloat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstyleshexnumber()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstyleshexnumber.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesinteger()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesinteger.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @numberstylesnumber()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\numberstyles", "numberstylesnumber.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@regioninfo
    {
        [TestClass]
        public class @testclass_regioninfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @regioninfocurrentregion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfocurrentregion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regioninfoequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfoequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regioninfogethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfogethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regioninfoismetric()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfoismetric.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regioninfoisocurrencysymbol()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfoisocurrencysymbol.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regioninfoname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfoname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regioninfotostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfotostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regioninfotwoletterisoregionname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\regioninfo", "regioninfotwoletterisoregionname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@stringinfo
    {
        [TestClass]
        public class @testclass_stringinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stringinfoctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfoctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfoctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfoctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfoequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfoequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfogethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfogethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfogetnexttextelement2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfogetnexttextelement2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfogettextelementenumerator1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfogettextelementenumerator1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfogettextelementenumerator2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfogettextelementenumerator2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfolengthintextelements()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfolengthintextelements.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfoparsecombiningcharacters()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfoparsecombiningcharacters.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinfostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\stringinfo", "stringinfostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@textelementenumerator
    {
        [TestClass]
        public class @testclass_textelementenumerator
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @textelementenumeratorcurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textelementenumerator", "textelementenumeratorcurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textelementenumeratorelementindex()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textelementenumerator", "textelementenumeratorelementindex.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textelementenumeratorgettextelement()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textelementenumerator", "textelementenumeratorgettextelement.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textelementenumeratormovenext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textelementenumerator", "textelementenumeratormovenext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textelementenumeratorreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textelementenumerator", "textelementenumeratorreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@textinfo
    {
        [TestClass]
        public class @testclass_textinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @textinfoculturename()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textinfo", "textinfoculturename.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textinfoequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textinfo", "textinfoequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textinfogethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textinfo", "textinfogethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textinfoisreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textinfo", "textinfoisreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textinfotostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textinfo", "textinfotostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textinfotoupper1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textinfo", "textinfotoupper1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @textinfotoupper2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\textinfo", "textinfotoupper2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@globalization.@unicodecategory
    {
        [TestClass]
        public class @testclass_unicodecategory
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @unicodecategoryclosepunctuation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryclosepunctuation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryconnectorpunctuation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryconnectorpunctuation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorycontrol()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorycontrol.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorydashpunctuation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorydashpunctuation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorydecimaldigitnumber()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorydecimaldigitnumber.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryenclosingmark()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryenclosingmark.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryfinalquotepunctuation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryfinalquotepunctuation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryformat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryformat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryinitialquotepunctuation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryinitialquotepunctuation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryletternumber()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryletternumber.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorylineseparator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorylineseparator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorylowercaseletter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorylowercaseletter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorymathsymbol()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorymathsymbol.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorymodifierletter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorymodifierletter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorymodifiersymbol()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorymodifiersymbol.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorynonspacingmark()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorynonspacingmark.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryopenpunctuation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryopenpunctuation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryotherletter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryotherletter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryothernotassigned()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryothernotassigned.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryothernumber()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryothernumber.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryotherpunctuation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryotherpunctuation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryothersymbol()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryothersymbol.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryparagraphseparator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryparagraphseparator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryprivateuse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryprivateuse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryspaceseparator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryspaceseparator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryspacingcombiningmark()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryspacingcombiningmark.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorysurrogate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorysurrogate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategorytitlecaseletter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategorytitlecaseletter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodecategoryuppercaseletter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\globalization\unicodecategory", "unicodecategoryuppercaseletter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@guid
    {
        [TestClass]
        public class @testclass_guid
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @guidcompareto1_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidcompareto1_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidcompareto2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidcompareto2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidctor1_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidctor1_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidctor2_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidctor2_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidctor3_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidctor3_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidempty()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidempty.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidequals1_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidequals1_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidequals2_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidequals2_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidequals3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidequals3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidgethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidgethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidnewguid()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidnewguid.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidtobytearray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidtobytearray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @guidtostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\guid", "guidtostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@icomparable
    {
        [TestClass]
        public class @testclass_icomparable
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @icomparablecompareto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\icomparable", "icomparablecompareto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@icomparable_generic
    {
        [TestClass]
        public class @testclass_icomparable_generic
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @icomparable_genericcompareto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\icomparable_generic", "icomparable_genericcompareto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@iconvertible
    {
        [TestClass]
        public class @testclass_iconvertible
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @iconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @iconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iconvertible", "iconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@idisposable
    {
        [TestClass]
        public class @testclass_idisposable
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @idisposabledispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\idisposable", "idisposabledispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@iformatable
    {
        [TestClass]
        public class @testclass_iformatable
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @iformatabletostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\iformatable", "iformatabletostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@indexoutofrangeexception
    {
        [TestClass]
        public class @testclass_indexoutofrangeexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @indexoutofrangeexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\indexoutofrangeexception", "indexoutofrangeexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @indexoutofrangeexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\indexoutofrangeexception", "indexoutofrangeexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @indexoutofrangeexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\indexoutofrangeexception", "indexoutofrangeexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@int
    {
        [TestClass]
        public class @testclass_int
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @int32compareto1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32compareto1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32equals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32equals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32equals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32equals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32iconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32iconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32maxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32maxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32minvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32minvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32parse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32parse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32parse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32parse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32parse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32parse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32parse4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32parse4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32tostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32tostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32tryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int", "int32tryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@int16
    {
        [TestClass]
        public class @testclass_int16
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @int16equals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16equals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16equals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16equals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16iconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16iconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16maxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16maxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16minvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16minvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16parse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16parse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16parse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16parse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16parse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16parse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int16tryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int16", "int16tryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@int64
    {
        [TestClass]
        public class @testclass_int64
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @int64compareto1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64compareto1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64equals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64equals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64equals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64equals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64iconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64iconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64maxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64maxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64minvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64minvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64parse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64parse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64parse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64parse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64parse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64parse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64tostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64tostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64tryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\int64", "int64tryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@intptr
    {
        [TestClass]
        public class @testclass_intptr
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @intptrctor_int32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrctor_int32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrctor_int64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrctor_int64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrctor_void()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrctor_void.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrgethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrgethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrtoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrtoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrtoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrtoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrtopointer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrtopointer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrtostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrtostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intptrzero()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\intptr", "intptrzero.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@invalidcastexception
    {
        [TestClass]
        public class @testclass_invalidcastexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @invalidcastexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidcastexception", "invalidcastexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @invalidcastexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidcastexception", "invalidcastexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @invalidcastexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidcastexception", "invalidcastexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@invalidoperationexception
    {
        [TestClass]
        public class @testclass_invalidoperationexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @invalidoperationexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidoperationexception", "invalidoperationexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @invalidoperationexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidoperationexception", "invalidoperationexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @invalidoperationexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidoperationexception", "invalidoperationexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@invalidprogramexception
    {
        [TestClass]
        public class @testclass_invalidprogramexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @invalidprogramexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidprogramexception", "invalidprogramexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @invalidprogramexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidprogramexception", "invalidprogramexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @invalidprogramexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\invalidprogramexception", "invalidprogramexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@binarywriter
    {
        [TestClass]
        public class @testclass_binarywriter
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @binarywriteroutstream()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\binarywriter", "binarywriteroutstream.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@directorynotfoundexception
    {
        [TestClass]
        public class @testclass_directorynotfoundexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @directorynotfoundexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\directorynotfoundexception", "directorynotfoundexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @directorynotfoundexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\directorynotfoundexception", "directorynotfoundexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@endofstreamexception
    {
        [TestClass]
        public class @testclass_endofstreamexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @endofstreamexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\endofstreamexception", "endofstreamexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @endofstreamexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\endofstreamexception", "endofstreamexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@fileaccess
    {
        [TestClass]
        public class @testclass_fileaccess
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @fileaccessenum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileaccess", "fileaccessenum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileaccessread()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileaccess", "fileaccessread.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileaccessreadwrite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileaccess", "fileaccessreadwrite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileaccesswrite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileaccess", "fileaccesswrite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@fileattributes
    {
        [TestClass]
        public class @testclass_fileattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @fileattributesarchive()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesarchive.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributescompressed()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributescompressed.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesdeivce()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesdeivce.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesdirectory()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesdirectory.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesencrypted()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesencrypted.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesenum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesenum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributeshidden()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributeshidden.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesnormal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesnormal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesnotcontentindexed()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesnotcontentindexed.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesoffline()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesoffline.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributesreparsepoint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributesreparsepoint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributessystem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributessystem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileattributestemporary()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileattributes", "fileattributestemporary.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@filemode
    {
        [TestClass]
        public class @testclass_filemode
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @filemodeappend()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filemode", "filemodeappend.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filemodecreate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filemode", "filemodecreate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filemodecreatenew()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filemode", "filemodecreatenew.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filemodeenum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filemode", "filemodeenum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filemodeopen()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filemode", "filemodeopen.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filemodeopenorcreate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filemode", "filemodeopenorcreate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filemodetruncate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filemode", "filemodetruncate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@filenotfoundexception
    {
        [TestClass]
        public class @testclass_filenotfoundexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @filenotfoundexceptionctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filenotfoundexception", "filenotfoundexceptionctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filenotfoundexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filenotfoundexception", "filenotfoundexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filenotfoundexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filenotfoundexception", "filenotfoundexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filenotfoundexceptiongetmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filenotfoundexception", "filenotfoundexceptiongetmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filenotfoundexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filenotfoundexception", "filenotfoundexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filenotfoundexceptiontostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filenotfoundexception", "filenotfoundexceptiontostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@fileshare
    {
        [TestClass]
        public class @testclass_fileshare
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @fileshareenum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileshare", "fileshareenum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filesharenone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileshare", "filesharenone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fileshareread()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileshare", "fileshareread.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filesharereadwrite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileshare", "filesharereadwrite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @filesharewrite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\fileshare", "filesharewrite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@filestream
    {
        [TestClass]
        public class @testclass_filestream
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @filestreamdispose()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\filestream", "filestreamdispose.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@ioexception
    {
        [TestClass]
        public class @testclass_ioexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ioexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\ioexception", "ioexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ioexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\ioexception", "ioexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@memorystream
    {
        [TestClass]
        public class @testclass_memorystream
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @memorystreamctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\memorystream", "memorystreamctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memorystreamctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\memorystream", "memorystreamctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memorystreamctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\memorystream", "memorystreamctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memorystreamctor4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\memorystream", "memorystreamctor4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memorystreamctor5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\memorystream", "memorystreamctor5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memorystreamctor6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\memorystream", "memorystreamctor6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memorystreamctor7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\memorystream", "memorystreamctor7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@pathtoolongexception
    {
        [TestClass]
        public class @testclass_pathtoolongexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @pathtoolongexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\pathtoolongexception", "pathtoolongexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @pathtoolongexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\pathtoolongexception", "pathtoolongexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@seekorigin
    {
        [TestClass]
        public class @testclass_seekorigin
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @seekoriginbegin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\seekorigin", "seekoriginbegin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seekorigincurrent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\seekorigin", "seekorigincurrent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seekoriginend()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\seekorigin", "seekoriginend.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seekoriginenum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\seekorigin", "seekoriginenum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@stream
    {
        [TestClass]
        public class @testclass_stream
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @streamdispose1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\stream", "streamdispose1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @streamdispose2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\stream", "streamdispose2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @streamnull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\stream", "streamnull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @streamreadtimeout()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\stream", "streamreadtimeout.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @streamwritetimeout()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\stream", "streamwritetimeout.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@streamreader
    {
        [TestClass]
        public class @testclass_streamreader
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @streamreadernull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\streamreader", "streamreadernull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@stringwriter
    {
        [TestClass]
        public class @testclass_stringwriter
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stringwriterencoding()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\stringwriter", "stringwriterencoding.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@textreader
    {
        [TestClass]
        public class @testclass_textreader
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @textreadernull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\textreader", "textreadernull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@io.@textwriter
    {
        [TestClass]
        public class @testclass_textwriter
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @textwriternull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\io\textwriter", "textwriternull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@math
    {
        [TestClass]
        public class @testclass_math
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @mathabs1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathabs1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathabs2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathabs2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathabs3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathabs3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathabs4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathabs4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathabs5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathabs5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathabs6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathabs6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathabs7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathabs7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathacos()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathacos.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathatan()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathatan.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathatan2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathatan2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathceiling()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathceiling.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathcos()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathcos.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathcosh()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathcosh.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathe()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathe.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathexp()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathexp.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathfloor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathfloor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathieeeremainder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathieeeremainder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathlog()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathlog.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathlog10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathlog10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmax9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmax9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathmin9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathmin9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathpi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathpi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathpow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathpow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathround1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathround1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathround2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathround2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathround3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathround3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathround4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathround4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsign1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsign1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsign2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsign2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsign3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsign3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsign4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsign4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsign5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsign5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsign6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsign6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsign7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsign7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsinh()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsinh.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathsqrt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathsqrt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathtan()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathtan.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathtanh()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathtanh.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathtestlib()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\math", "mathtestlib.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@memberaccessexception
    {
        [TestClass]
        public class @testclass_memberaccessexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @memberaccessexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\memberaccessexception", "memberaccessexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memberaccessexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\memberaccessexception", "memberaccessexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @memberaccessexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\memberaccessexception", "memberaccessexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@methodaccessexception
    {
        [TestClass]
        public class @testclass_methodaccessexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @methodaccessexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\methodaccessexception", "methodaccessexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodaccessexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\methodaccessexception", "methodaccessexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodaccessexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\methodaccessexception", "methodaccessexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@missingfieldexception
    {
        [TestClass]
        public class @testclass_missingfieldexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @missingfieldexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingfieldexception", "missingfieldexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingfieldexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingfieldexception", "missingfieldexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingfieldexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingfieldexception", "missingfieldexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingfieldexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingfieldexception", "missingfieldexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@missingmemberexception
    {
        [TestClass]
        public class @testclass_missingmemberexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @missingmemberexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmemberexception", "missingmemberexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmemberexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmemberexception", "missingmemberexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmemberexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmemberexception", "missingmemberexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmemberexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmemberexception", "missingmemberexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@missingmethodexception
    {
        [TestClass]
        public class @testclass_missingmethodexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @missingmethodexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmethodexception", "missingmethodexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmethodexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmethodexception", "missingmethodexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmethodexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmethodexception", "missingmethodexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmethodexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\missingmethodexception", "missingmethodexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@multicastdelegate
    {
        [TestClass]
        public class @testclass_multicastdelegate
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @delegatedefinitions()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\multicastdelegate", "delegatedefinitions.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @multicastdelegatecombineimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\multicastdelegate", "multicastdelegatecombineimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @multicastdelegateequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\multicastdelegate", "multicastdelegateequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @multicastdelegategethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\multicastdelegate", "multicastdelegategethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @multicastdelegategetinvocationlist()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\multicastdelegate", "multicastdelegategetinvocationlist.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @verificationagent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\multicastdelegate", "verificationagent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@notimplementedexception
    {
        [TestClass]
        public class @testclass_notimplementedexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @notimplementedexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\notimplementedexception", "notimplementedexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @notimplementedexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\notimplementedexception", "notimplementedexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @notimplementedexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\notimplementedexception", "notimplementedexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@notsupportedexception
    {
        [TestClass]
        public class @testclass_notsupportedexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @notsupportedexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\notsupportedexception", "notsupportedexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @notsupportedexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\notsupportedexception", "notsupportedexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @notsupportedexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\notsupportedexception", "notsupportedexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@nullable
    {
        [TestClass]
        public class @testclass_nullable
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @nullablecompare()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablecompare.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullablector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullableequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullableequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullableequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullableequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullablegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullablegetunderlyingtype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablegetunderlyingtype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullablegetvalueordefault1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablegetvalueordefault1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullablegetvalueordefault2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablegetvalueordefault2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullablehasvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablehasvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullabletostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullabletostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullablevalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullable", "nullablevalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@nullreferenceexception
    {
        [TestClass]
        public class @testclass_nullreferenceexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @nullreferenceexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\nullreferenceexception", "nullreferenceexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@object
    {
        [TestClass]
        public class @testclass_object
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @objectctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objectctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objectequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objectequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectfinalize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objectfinalize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectgethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objectgethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectmemberwiseclone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objectmemberwiseclone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectreferenceequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objectreferenceequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objecttostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\object", "objecttostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@objectdisposedexception
    {
        [TestClass]
        public class @testclass_objectdisposedexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @objectdisposedexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\objectdisposedexception", "objectdisposedexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectdisposedexceptionobjectname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\objectdisposedexception", "objectdisposedexceptionobjectname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@obsoleteattribute
    {
        [TestClass]
        public class @testclass_obsoleteattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @obsoleteattributector1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\obsoleteattribute", "obsoleteattributector1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @obsoleteattributector2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\obsoleteattribute", "obsoleteattributector2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @obsoleteattributector3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\obsoleteattribute", "obsoleteattributector3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @obsoleteattributeiserror()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\obsoleteattribute", "obsoleteattributeiserror.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @obsoleteattributemessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\obsoleteattribute", "obsoleteattributemessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@outofmemoryexception
    {
        [TestClass]
        public class @testclass_outofmemoryexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @outofmemoryexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\outofmemoryexception", "outofmemoryexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @outofmemoryexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\outofmemoryexception", "outofmemoryexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @outofmemoryexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\outofmemoryexception", "outofmemoryexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@overflowexception
    {
        [TestClass]
        public class @testclass_overflowexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @overflowexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\overflowexception", "overflowexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @overflowexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\overflowexception", "overflowexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @overflowexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\overflowexception", "overflowexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@paramarrayattribute
    {
        [TestClass]
        public class @testclass_paramarrayattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @paramarrayattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\paramarrayattribute", "paramarrayattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@platformnotsupportedexception
    {
        [TestClass]
        public class @testclass_platformnotsupportedexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @platformnotsupportedexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\platformnotsupportedexception", "platformnotsupportedexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @platformnotsupportedexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\platformnotsupportedexception", "platformnotsupportedexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @platformnotsupportedexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\platformnotsupportedexception", "platformnotsupportedexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@predicate
    {
        [TestClass]
        public class @testclass_predicate
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @predicatebegininvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\predicate", "predicatebegininvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @predicateendinvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\predicate", "predicateendinvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @predicateinvoke()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\predicate", "predicateinvoke.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@random
    {
        [TestClass]
        public class @testclass_random
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @randomctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @randomctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @randomnext1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomnext1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @randomnext2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomnext2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @randomnext3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomnext3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @randomnextbytes()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomnextbytes.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @randomnextdouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomnextdouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @randomsample()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\random", "randomsample.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@rankexception
    {
        [TestClass]
        public class @testclass_rankexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @rankexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\rankexception", "rankexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rankexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\rankexception", "rankexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rankexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\rankexception", "rankexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@ambiguousmatchexception
    {
        [TestClass]
        public class @testclass_ambiguousmatchexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ambiguousmatchexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\ambiguousmatchexception", "ambiguousmatchexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ambiguousmatchexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\ambiguousmatchexception", "ambiguousmatchexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ambiguousmatchexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\ambiguousmatchexception", "ambiguousmatchexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assembly
    {
        [TestClass]
        public class @testclass_assembly
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @testassembly1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assembly", "testassembly1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testtarget()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assembly", "testtarget.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblyconfigurationattribute
    {
        [TestClass]
        public class @testclass_assemblyconfigurationattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblyconfigurationattributeconfiguration()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblyconfigurationattribute", "assemblyconfigurationattributeconfiguration.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblyconfigurationattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblyconfigurationattribute", "assemblyconfigurationattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblydefaultaliasattribute
    {
        [TestClass]
        public class @testclass_assemblydefaultaliasattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblydefaultaliasattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblydefaultaliasattribute", "assemblydefaultaliasattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblydefaultaliasattributedefaultalias()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblydefaultaliasattribute", "assemblydefaultaliasattributedefaultalias.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblydelaysignattribute
    {
        [TestClass]
        public class @testclass_assemblydelaysignattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblydelaysignattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblydelaysignattribute", "assemblydelaysignattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblydelaysignattributedelaysign()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblydelaysignattribute", "assemblydelaysignattributedelaysign.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblydescriptionattribute
    {
        [TestClass]
        public class @testclass_assemblydescriptionattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblydescriptionattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblydescriptionattribute", "assemblydescriptionattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblydescriptionattributedescription()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblydescriptionattribute", "assemblydescriptionattributedescription.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblykeyfileattribute
    {
        [TestClass]
        public class @testclass_assemblykeyfileattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblykeyfileattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblykeyfileattribute", "assemblykeyfileattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblykeyfileattributekeyfile()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblykeyfileattribute", "assemblykeyfileattributekeyfile.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblykeynameattribute
    {
        [TestClass]
        public class @testclass_assemblykeynameattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblykeynameattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblykeynameattribute", "assemblykeynameattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblykeynameattributekeyname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblykeynameattribute", "assemblykeynameattributekeyname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblyname
    {
        [TestClass]
        public class @testclass_assemblyname
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblynamegetpublickey()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblyname", "assemblynamegetpublickey.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynamegetpublickeytoken()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblyname", "assemblynamegetpublickeytoken.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynamesetpublickey()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblyname", "assemblynamesetpublickey.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynamesetpublickeytoken()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblyname", "assemblynamesetpublickeytoken.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynameversion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblyname", "assemblynameversion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblynameflags
    {
        [TestClass]
        public class @testclass_assemblynameflags
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblynameflagsenablejitcompileoptimizer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblynameflags", "assemblynameflagsenablejitcompileoptimizer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynameflagsenablejitcompiletracking()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblynameflags", "assemblynameflagsenablejitcompiletracking.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynameflagsnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblynameflags", "assemblynameflagsnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynameflagspublickey()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblynameflags", "assemblynameflagspublickey.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblynameflagsretargetable()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblynameflags", "assemblynameflagsretargetable.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@assemblytitleattribute
    {
        [TestClass]
        public class @testclass_assemblytitleattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblytitleattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblytitleattribute", "assemblytitleattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @assemblytitleattributetitle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\assemblytitleattribute", "assemblytitleattributetitle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@callingconventions
    {
        [TestClass]
        public class @testclass_callingconventions
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @callingconventionsany()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\callingconventions", "callingconventionsany.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @callingconventionsexplicitthis()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\callingconventions", "callingconventionsexplicitthis.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @callingconventionshasthis()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\callingconventions", "callingconventionshasthis.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @callingconventionsstandard()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\callingconventions", "callingconventionsstandard.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @callingconventionsvarargs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\callingconventions", "callingconventionsvarargs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@constructorinfo
    {
        [TestClass]
        public class @testclass_constructorinfo
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @constructorinfoconstructorname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\constructorinfo", "constructorinfoconstructorname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @constructorinfotypeconstructorname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\constructorinfo", "constructorinfotypeconstructorname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@defaultmemberattribute
    {
        [TestClass]
        public class @testclass_defaultmemberattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @defaultmemberattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\defaultmemberattribute", "defaultmemberattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @defaultmemberattributemembername()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\defaultmemberattribute", "defaultmemberattributemembername.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@emit.@flowcontrol
    {
        [TestClass]
        public class @testclass_flowcontrol
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @flowcontrolbranch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\flowcontrol", "flowcontrolbranch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @flowcontrolcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\flowcontrol", "flowcontrolcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @flowcontrolcond_branch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\flowcontrol", "flowcontrolcond_branch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @flowcontrolmeta()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\flowcontrol", "flowcontrolmeta.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @flowcontrolnext()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\flowcontrol", "flowcontrolnext.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @flowcontrolreturn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\flowcontrol", "flowcontrolreturn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @flowcontrolthrow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\flowcontrol", "flowcontrolthrow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@emit.@opcodes
    {
        [TestClass]
        public class @testclass_opcodes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @opcodeequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodeequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodeequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodeequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodeflowcontrol()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodeflowcontrol.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodename()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodename.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodeopcodetype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodeopcodetype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodeoperandtype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodeoperandtype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesadd_ovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesadd_ovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesadd_ovf_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesadd_ovf_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesand()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesand.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesarglist()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesarglist.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbeq()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbeq.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbeq_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbeq_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbge()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbge.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbge_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbge_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbge_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbge_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbge_un_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbge_un_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbgt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbgt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbgt_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbgt_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbgt_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbgt_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbgt_un_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbgt_un_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesble_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesble_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesble_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesble_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesble_un_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesble_un_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesblt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesblt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesblt_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesblt_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesblt_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesblt_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesblt_un_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesblt_un_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbne_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbne_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbne_un_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbne_un_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbox()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbox.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbreak()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbreak.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbrfalse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbrfalse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbrfalse_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbrfalse_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbrtrue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbrtrue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbrtrue_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbrtrue_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesbr_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesbr_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescalli()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescalli.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescallvirt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescallvirt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescastclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescastclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesceq()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesceq.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescgt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescgt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescgt_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescgt_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesckfinite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesckfinite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesclt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesclt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesclt_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesclt_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconstrained()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconstrained.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_i()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_i.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_i1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_i1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_i2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_i2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i1_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i1_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i2_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i2_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i4_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i4_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i8_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i8_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_i_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_i_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u1_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u1_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u2_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u2_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u4_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u4_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u8_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u8_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_ovf_u_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_ovf_u_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_r4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_r4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_r8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_r8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_r_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_r_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_u()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_u.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_u1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_u1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_u2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_u2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_u4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_u4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesconv_u8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesconv_u8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescpblk()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescpblk.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodescpobj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodescpobj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesdiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesdiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesdiv_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesdiv_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesdup()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesdup.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesendfilter()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesendfilter.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesendfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesendfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesinitblk()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesinitblk.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesinitobj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesinitobj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesisinst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesisinst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesjmp()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesjmp.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarga()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarga.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarga_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarga_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarg_0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarg_0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarg_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarg_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarg_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarg_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarg_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarg_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldarg_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldarg_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_m1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_m1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i4_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i4_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_r4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_r4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldc_r8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldc_r8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelema()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelema.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_i()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_i.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_i1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_i1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_i2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_i2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_r4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_r4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_r8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_r8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_ref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_ref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_u1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_u1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_u2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_u2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldelem_u4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldelem_u4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldfld()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldfld.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldflda()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldflda.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldftn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldftn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_i()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_i.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_i1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_i1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_i2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_i2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_r4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_r4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_r8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_r8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_ref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_ref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_u1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_u1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_u2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_u2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldind_u4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldind_u4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldlen()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldlen.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloca()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloca.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloca_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloca_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloc_0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloc_0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloc_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloc_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloc_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloc_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloc_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloc_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldloc_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldloc_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldnull()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldnull.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldobj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldobj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldsfld()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldsfld.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldsflda()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldsflda.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldstr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldstr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldtoken()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldtoken.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesldvirtftn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesldvirtftn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesleave()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesleave.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesleave_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesleave_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodeslocalloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodeslocalloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesmkrefany()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesmkrefany.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesmul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesmul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesmul_ovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesmul_ovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesmul_ovf_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesmul_ovf_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesneg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesneg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesnewarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesnewarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesnewobj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesnewobj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesnop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesnop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesnot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesnot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodespop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodespop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefix1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefix1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefix2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefix2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefix3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefix3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefix4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefix4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefix5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefix5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefix6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefix6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefix7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefix7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesprefixref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesprefixref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesreadonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesreadonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesrefanytype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesrefanytype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesrefanyval()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesrefanyval.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesrem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesrem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesrem_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesrem_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesret()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesret.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesrethrow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesrethrow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesshl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesshl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesshr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesshr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesshr_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesshr_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodessizeof()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodessizeof.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstarg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstarg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstarg_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstarg_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_i()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_i.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_i1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_i1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_i2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_i2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_r4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_r4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_r8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_r8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstelem_ref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstelem_ref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstfld()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstfld.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_i()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_i.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_i1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_i1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_i2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_i2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_r4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_r4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_r8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_r8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstind_ref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstind_ref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstloc_0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstloc_0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstloc_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstloc_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstloc_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstloc_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstloc_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstloc_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstloc_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstloc_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstobj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstobj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesstsfld()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesstsfld.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodessub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodessub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodessub_ovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodessub_ovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodessub_ovf_un()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodessub_ovf_un.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesswitch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesswitch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodestackbehaviourpop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodestackbehaviourpop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodestackbehaviourpush()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodestackbehaviourpush.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodestailcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodestailcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodestakessinglebyteargument()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodestakessinglebyteargument.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesthrow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesthrow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesunaligned()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesunaligned.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesunbox()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesunbox.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesunbox_any()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesunbox_any.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesvolatile()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesvolatile.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodesxor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodesxor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodetostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodetostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodevalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodes", "opcodevalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@emit.@opcodetype
    {
        [TestClass]
        public class @testclass_opcodetype
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @opcodetypemacro()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodetype", "opcodetypemacro.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodetypenternal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodetype", "opcodetypenternal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodetypeobjmodel()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodetype", "opcodetypeobjmodel.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodetypeprefix()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodetype", "opcodetypeprefix.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @opcodetypeprimitive()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\opcodetype", "opcodetypeprimitive.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@emit.@operandtype
    {
        [TestClass]
        public class @testclass_operandtype
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @operandtypeinlinebrtarget()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinebrtarget.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinefield()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinefield.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinei()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinei.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinei8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinei8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinemethod()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinemethod.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinenone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinenone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinliner()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinliner.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinesig()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinesig.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinestring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinestring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlineswitch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlineswitch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinetok()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinetok.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinetype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinetype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeinlinevar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeinlinevar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeshortinlinebrtarget()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeshortinlinebrtarget.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeshortinlinei()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeshortinlinei.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeshortinliner()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeshortinliner.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @operandtypeshortinlinevar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\operandtype", "operandtypeshortinlinevar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@emit.@packingsize
    {
        [TestClass]
        public class @testclass_packingsize
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @packingsize16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsize16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsize2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsize2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsize4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsize4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsizesize1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsizesize1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsizesize128()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsizesize128.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsizesize32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsizesize32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsizesize64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsizesize64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsizesize8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsizesize8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @packingsizeunspecified()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\packingsize", "packingsizeunspecified.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@emit.@stackbehaviour
    {
        [TestClass]
        public class @testclass_stackbehaviour
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stackbehaviourpop0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpop0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpop1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpop1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpop1_pop1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpop1_pop1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopi_pop1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopi_pop1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopi_popi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopi_popi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopi_popi8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopi_popi8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopi_popi_popi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopi_popi_popi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopi_popr4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopi_popr4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopi_popr8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopi_popr8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_pop1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_pop1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_popi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_popi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_popi_pop1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_popi_pop1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_popi_popi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_popi_popi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_popi_popi8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_popi_popi8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_popi_popr4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_popi_popr4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_popi_popr8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_popi_popr8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpopref_popi_popref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpopref_popi_popref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpush0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpush0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpush1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpush1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpush1_push1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpush1_push1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpushi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpushi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpushi8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpushi8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpushr4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpushr4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpushr8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpushr8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourpushref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourpushref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourvarpop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourvarpop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stackbehaviourvarpush()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\emit\stackbehaviour", "stackbehaviourvarpush.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@eventattributes
    {
        [TestClass]
        public class @testclass_eventattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @eventattributesnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\eventattributes", "eventattributesnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @eventattributesrtspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\eventattributes", "eventattributesrtspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @eventattributesspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\eventattributes", "eventattributesspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@fieldattributes
    {
        [TestClass]
        public class @testclass_fieldattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @fieldattributesassembly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesassembly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesfamandassem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesfamandassem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesfamily()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesfamily.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesfamorassem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesfamorassem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesfieldaccessmask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesfieldaccessmask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributeshasdefault()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributeshasdefault.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributeshasfieldrva()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributeshasfieldrva.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesinitonly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesinitonly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesliteral()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesliteral.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesnotserialized()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesnotserialized.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributespinvokeimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributespinvokeimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesprivate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesprivate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesprivatescope()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesprivatescope.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributespublic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributespublic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesrtspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesrtspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldattributesstatic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\fieldattributes", "fieldattributesstatic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@methodattributes
    {
        [TestClass]
        public class @testclass_methodattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @methodattributesabstract()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesabstract.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesfamandassem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesfamandassem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesfamily()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesfamily.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesfamorassem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesfamorassem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesfinal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesfinal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributeshassecurity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributeshassecurity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributeshidebysig()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributeshidebysig.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesmemberaccessmask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesmemberaccessmask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesnewslot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesnewslot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributespinvokeimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributespinvokeimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesprivate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesprivate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesprivatescope()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesprivatescope.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributespublic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributespublic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesrequiresecobject()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesrequiresecobject.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesreuseslot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesreuseslot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesrtspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesrtspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesstatic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesstatic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesunmanagedexport()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesunmanagedexport.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesvirtual()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesvirtual.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodattributesvtablelayoutmask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodattributes", "methodattributesvtablelayoutmask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@methodimplattributes
    {
        [TestClass]
        public class @testclass_methodimplattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @methodimplattributescodetypemask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributescodetypemask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesforwardref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesforwardref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesil()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesil.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesinternalcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesinternalcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesmanaged()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesmanaged.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesmanagedmask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesmanagedmask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesnative()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesnative.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesnoinlining()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesnoinlining.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesoptil()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesoptil.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributespreservesig()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributespreservesig.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesruntime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesruntime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributessynchronized()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributessynchronized.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimplattributesunmanaged()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\methodimplattributes", "methodimplattributesunmanaged.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@parameterattributes
    {
        [TestClass]
        public class @testclass_parameterattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @parameterattributeshasdefault()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\parameterattributes", "parameterattributeshasdefault.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @parameterattributesin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\parameterattributes", "parameterattributesin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @parameterattributesnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\parameterattributes", "parameterattributesnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @parameterattributesoptional()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\parameterattributes", "parameterattributesoptional.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @parameterattributesout()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\parameterattributes", "parameterattributesout.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @parameterattributesretval()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\parameterattributes", "parameterattributesretval.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@propertyattributes
    {
        [TestClass]
        public class @testclass_propertyattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @propertyattributeshasdefault()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\propertyattributes", "propertyattributeshasdefault.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @propertyattributesnone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\propertyattributes", "propertyattributesnone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @propertyattributesrtspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\propertyattributes", "propertyattributesrtspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @propertyattributesspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\propertyattributes", "propertyattributesspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@targetinvocationexception
    {
        [TestClass]
        public class @testclass_targetinvocationexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @targetinvocationexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\targetinvocationexception", "targetinvocationexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @targetinvocationexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\targetinvocationexception", "targetinvocationexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@targetparametercountexception
    {
        [TestClass]
        public class @testclass_targetparametercountexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @targetparametercountexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\targetparametercountexception", "targetparametercountexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @targetparametercountexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\targetparametercountexception", "targetparametercountexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @targetparametercountexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\targetparametercountexception", "targetparametercountexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@reflection.@typeattributes
    {
        [TestClass]
        public class @testclass_typeattributes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @typeattributesabstract()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesabstract.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesansiclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesansiclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesautoclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesautoclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesautolayout()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesautolayout.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesbeforefieldinit()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesbeforefieldinit.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesclasssemanticsmask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesclasssemanticsmask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesexplicitlayout()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesexplicitlayout.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributeshassecurity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributeshassecurity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesimport()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesimport.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesinterface()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesinterface.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributeslayoutmask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributeslayoutmask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesnestedassembly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesnestedassembly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesnestedfamandassem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesnestedfamandassem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesnestedfamily()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesnestedfamily.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesnestedfamorassem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesnestedfamorassem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesnestedprivate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesnestedprivate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesnestedpublic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesnestedpublic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributespublic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributespublic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesrtspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesrtspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributessealed()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributessealed.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributessequentiallayout()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributessequentiallayout.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesserializable()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesserializable.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesspecialname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesspecialname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesstringformatmask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesstringformatmask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesunicodeclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesunicodeclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattributesvisibilitymask()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattributesvisibilitymask.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeattribytesnotpublic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\reflection\typeattributes", "typeattribytesnotpublic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@resources.@missingmanifestresourceexception
    {
        [TestClass]
        public class @testclass_missingmanifestresourceexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @missingmanifestresourceexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\missingmanifestresourceexception", "missingmanifestresourceexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmanifestresourceexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\missingmanifestresourceexception", "missingmanifestresourceexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @missingmanifestresourceexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\missingmanifestresourceexception", "missingmanifestresourceexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@resources.@neutralresourceslanguageattribute
    {
        [TestClass]
        public class @testclass_neutralresourceslanguageattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @neutralresourceslanguageattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\neutralresourceslanguageattribute", "neutralresourceslanguageattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @neutralresourceslanguageattributeculturename()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\neutralresourceslanguageattribute", "neutralresourceslanguageattributeculturename.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@resources.@resourcemanager
    {
        [TestClass]
        public class @testclass_resourcemanager
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @customculture()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\resourcemanager", "customculture.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@resources.@satellitecontractversionattribute
    {
        [TestClass]
        public class @testclass_satellitecontractversionattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @satellitecontractversionattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\satellitecontractversionattribute", "satellitecontractversionattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @satellitecontractversionattributeversion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\resources\satellitecontractversionattribute", "satellitecontractversionattributeversion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@accessedthroughpropertyattribute
    {
        [TestClass]
        public class @testclass_accessedthroughpropertyattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @atpactor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\accessedthroughpropertyattribute", "atpactor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @atpapropertyname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\accessedthroughpropertyattribute", "atpapropertyname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@compilationrelaxations
    {
        [TestClass]
        public class @testclass_compilationrelaxations
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @compilationrelaxationsattributector1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\compilationrelaxations", "compilationrelaxationsattributector1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@compilergeneratedattribute
    {
        [TestClass]
        public class @testclass_compilergeneratedattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @compilergeneratedattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\compilergeneratedattribute", "compilergeneratedattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@customconstantattribute
    {
        [TestClass]
        public class @testclass_customconstantattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @customconstantattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\customconstantattribute", "customconstantattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@indexernameattribute
    {
        [TestClass]
        public class @testclass_indexernameattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @indexernameattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\indexernameattribute", "indexernameattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@internalsvisibletoattribute
    {
        [TestClass]
        public class @testclass_internalsvisibletoattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @internalsvisibletoattributeassemblyname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\internalsvisibletoattribute", "internalsvisibletoattributeassemblyname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @internalsvisibletoattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\internalsvisibletoattribute", "internalsvisibletoattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@methodimploptions
    {
        [TestClass]
        public class @testclass_methodimploptions
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @methodimploptionsnoinlining()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\methodimploptions", "methodimploptionsnoinlining.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodimploptionspreservesig()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\methodimploptions", "methodimploptionspreservesig.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@runtimecompatibilityattribute
    {
        [TestClass]
        public class @testclass_runtimecompatibilityattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @runtimecompatibilityattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\runtimecompatibilityattribute", "runtimecompatibilityattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @runtimecompatibilityattributewrapnonexceptionthrows()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\runtimecompatibilityattribute", "runtimecompatibilityattributewrapnonexceptionthrows.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@compilerservices.@runtimehelpers
    {
        [TestClass]
        public class @testclass_runtimehelpers
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\runtimehelpers", "gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @platformassembly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\runtimehelpers", "platformassembly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @userassembly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\compilerservices\runtimehelpers", "userassembly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@decimalconstantattribute
    {
        [TestClass]
        public class @testclass_decimalconstantattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @decimalconstantattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\decimalconstantattribute", "decimalconstantattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimalconstantattributevalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\decimalconstantattribute", "decimalconstantattributevalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@fixedbufferattribute
    {
        [TestClass]
        public class @testclass_fixedbufferattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @fixedbufferattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\fixedbufferattribute", "fixedbufferattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fixedbufferattributeelementtype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\fixedbufferattribute", "fixedbufferattributeelementtype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fixedbufferattributelength()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\fixedbufferattribute", "fixedbufferattributelength.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@callingconvention
    {
        [TestClass]
        public class @testclass_callingconvention
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @callingconventionwinapi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\callingconvention", "callingconventionwinapi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@charset
    {
        [TestClass]
        public class @testclass_charset
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @charsetunicode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\charset", "charsetunicode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@dllimportattribute
    {
        [TestClass]
        public class @testclass_dllimportattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dllimporttest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\dllimportattribute", "dllimporttest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@fieldoffsetattribute
    {
        [TestClass]
        public class @testclass_fieldoffsetattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @fieldoffsetattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\fieldoffsetattribute", "fieldoffsetattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldoffsetattributevalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\fieldoffsetattribute", "fieldoffsetattributevalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@gchandle
    {
        [TestClass]
        public class @testclass_gchandle
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @gchandleaddrofpinnedobject()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandle", "gchandleaddrofpinnedobject.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gchandlealloc1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandle", "gchandlealloc1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gchandlefree()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandle", "gchandlefree.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gchandletarget()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandle", "gchandletarget.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@gchandletype
    {
        [TestClass]
        public class @testclass_gchandletype
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @gchandletypenormal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandletype", "gchandletypenormal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gchandletypepinned()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandletype", "gchandletypepinned.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gchandletypeweak()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandletype", "gchandletypeweak.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gchandletypeweaktrackresurrection()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\gchandletype", "gchandletypeweaktrackresurrection.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@inattribute
    {
        [TestClass]
        public class @testclass_inattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @inattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\inattribute", "inattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@layoutkind
    {
        [TestClass]
        public class @testclass_layoutkind
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @layoutkindauto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\layoutkind", "layoutkindauto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @layoutkindsequential()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\layoutkind", "layoutkindsequential.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@marshal
    {
        [TestClass]
        public class @testclass_marshal
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @marshalsizeof1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshal", "marshalsizeof1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalsizeof2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshal", "marshalsizeof2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @oleaut32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshal", "oleaut32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@marshalasattribute
    {
        [TestClass]
        public class @testclass_marshalasattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @marshalasattributearraysubtype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributearraysubtype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributector1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributector1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributector2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributector2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributemarshalcookie()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributemarshalcookie.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributemarshaltype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributemarshaltype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributemarshaltyperef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributemarshaltyperef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributesizeconst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributesizeconst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributesizeparamindex()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributesizeparamindex.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @marshalasattributevalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\marshalasattribute", "marshalasattributevalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@outattribute
    {
        [TestClass]
        public class @testclass_outattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @outattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\outattribute", "outattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@preservesigattribute
    {
        [TestClass]
        public class @testclass_preservesigattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @preservesigattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\preservesigattribute", "preservesigattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@safehandle
    {
        [TestClass]
        public class @testclass_safehandle
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @safehandlector_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandlector_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandledangerousaddref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandledangerousaddref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandledangerousgethandle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandledangerousgethandle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandledangerousrelease()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandledangerousrelease.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandledispose1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandledispose1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandledispose2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandledispose2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandlehandle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandlehandle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandleisclosed()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandleisclosed.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandleisinvalid()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandleisinvalid.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandlesethandle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandlesethandle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @safehandlesethandleasinvalid()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\safehandle", "safehandlesethandleasinvalid.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@structlayoutattribute
    {
        [TestClass]
        public class @testclass_structlayoutattribute
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @structlayoutattributecharset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\structlayoutattribute", "structlayoutattributecharset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structlayoutattributector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\structlayoutattribute", "structlayoutattributector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structlayoutattributepack()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\structlayoutattribute", "structlayoutattributepack.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structlayoutattributesize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\structlayoutattribute", "structlayoutattributesize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structlayoutattributevalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\structlayoutattribute", "structlayoutattributevalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtime.@interopservices.@unmanagedtype
    {
        [TestClass]
        public class @testclass_unmanagedtype
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_unmanagedtype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtime\interopservices\unmanagedtype", "unmanagedtype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtimefieldhandle
    {
        [TestClass]
        public class @testclass_runtimefieldhandle
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @runtimefieldhandleequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtimefieldhandle", "runtimefieldhandleequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @runtimefieldhandlegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtimefieldhandle", "runtimefieldhandlegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtimemethodhandle
    {
        [TestClass]
        public class @testclass_runtimemethodhandle
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @runtimemethodhandleequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtimemethodhandle", "runtimemethodhandleequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @runtimemethodhanldegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtimemethodhandle", "runtimemethodhanldegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@runtimetypehandle
    {
        [TestClass]
        public class @testclass_runtimetypehandle
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @runtimetypehandleequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtimetypehandle", "runtimetypehandleequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @runtimetypehandlegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\runtimetypehandle", "runtimetypehandlegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@sbyte
    {
        [TestClass]
        public class @testclass_sbyte
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @sbytecompareto2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbytecompareto2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbytegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbytegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteiconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteiconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbytemaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbytemaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteparse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteparse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteparse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteparse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyteparse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbyteparse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbytetryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\sbyte", "sbytetryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@security.@securityexception
    {
        [TestClass]
        public class @testclass_securityexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @securityexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\security\securityexception", "securityexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @securityexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\security\securityexception", "securityexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @securityexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\security\securityexception", "securityexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @securityexceptiontostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\security\securityexception", "securityexceptiontostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@single
    {
        [TestClass]
        public class @testclass_single
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @singleepsilon()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleepsilon.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singlegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singlegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleisinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleisinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleisnan()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleisnan.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleisnegativeinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleisnegativeinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleispositiveinfinity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleispositiveinfinity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singlemaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singlemaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singlenan()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singlenan.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleparse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleparse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleparse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singleparse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singletryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\single", "singletryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@string
    {
        [TestClass]
        public class @testclass_string
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stringchars()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringchars.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcompare1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringcompare1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcompare15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringcompare15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcompare2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringcompare2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcompare9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringcompare9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcompareordinal1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringcompareordinal1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcompareordinal2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringcompareordinal2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringconcat8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringconcat8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcopyto()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringcopyto.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringctor5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringctor5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringctorchar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringctorchar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringempty()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringempty.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringequals3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringequals3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringequals6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringequals6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringformat1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringformat1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringformat2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringformat2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringgetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringgetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringgethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringgethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringiconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringiconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringienumerablegetenumerator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringienumerablegetenumerator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringindexof10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringindexof10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringinsert()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringinsert.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringisnullorempty()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringisnullorempty.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringjoin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringjoin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringjoin1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringjoin1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringjoin2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringjoin2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringlength()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringlength.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringpadleft()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringpadleft.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringpadleft1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringpadleft1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringpadleft2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringpadleft2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringpadright()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringpadright.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringpadright1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringpadright1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringpadright2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringpadright2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringremove1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringremove1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringremove2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringremove2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringreplace1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringreplace1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringreplace2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringreplace2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringsplit1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringsplit1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringsubstring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringsubstring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringsubstring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringsubstring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringtochararray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringtochararray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringtostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringtostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringtrim1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringtrim1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringtrim1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringtrim1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringtrim2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringtrim2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringtrim3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringtrim3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringtrim4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\string", "stringtrim4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@stringcompare
    {
        [TestClass]
        public class @testclass_stringcompare
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stringcomparerctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcompare", "stringcomparerctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@stringcomparer
    {
        [TestClass]
        public class @testclass_stringcomparer
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stringcomparercompare2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparer", "stringcomparercompare2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcomparerequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparer", "stringcomparerequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcomparerequals3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparer", "stringcomparerequals3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcomparergettype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparer", "stringcomparergettype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@stringcomparison
    {
        [TestClass]
        public class @testclass_stringcomparison
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stringcomparisoncurrentculture()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparison", "stringcomparisoncurrentculture.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcomparisoncurrentcultureignorecase()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparison", "stringcomparisoncurrentcultureignorecase.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcomparisonordinal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparison", "stringcomparisonordinal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringcomparisonordinalignorecase()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\stringcomparison", "stringcomparisonordinalignorecase.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@szarrayhelper
    {
        [TestClass]
        public class @testclass_szarrayhelper
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @szarrayhelpersetitem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\szarrayhelper", "szarrayhelpersetitem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@text.@decoder
    {
        [TestClass]
        public class @testclass_decoder
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @decoderctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\decoder", "decoderctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decoderreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\decoder", "decoderreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@text.@encoder
    {
        [TestClass]
        public class @testclass_encoder
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @encoderctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoder", "encoderctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@text.@encoding
    {
        [TestClass]
        public class @testclass_encoding
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @encodingbigendianunicode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingbigendianunicode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingclone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingclone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingconvert1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingconvert1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingconvert2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingconvert2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytecount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytecount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytecount1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytecount1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytecount2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytecount2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytecount3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytecount3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytes1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytes1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytes2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytes2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytes3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytes3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytes4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytes4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetbytes5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetbytes5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetcharcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetcharcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetcharcount1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetcharcount1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetcharcount2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetcharcount2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetchars1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetchars1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetchars2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetchars2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetchars3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetchars3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetdecoder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetdecoder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetencoder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetencoder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetencoding2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetencoding2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetmaxbytecount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetmaxbytecount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetmaxcharcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetmaxcharcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetpreamble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetpreamble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodinggetstring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodinggetstring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingunicode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingunicode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingutf8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingutf8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @encodingwebname()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\encoding", "encodingwebname.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@text.@stringbuilder
    {
        [TestClass]
        public class @testclass_stringbuilder
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @stringbuilderappend()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend13()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend13.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend17()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend17.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend18()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend18.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend19()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend19.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderappend9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderappend9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuildercapacity()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuildercapacity.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuildercapacity_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuildercapacity_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderchars()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderchars.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderctor4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderctor4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderctor5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderctor5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderctor6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderctor6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderinsert()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderinsert.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderinsert3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderinsert3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderinsert4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderinsert4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderlength()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderlength.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderlength_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderlength_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderremove()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderremove.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderreplace1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderreplace1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderreplace2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderreplace2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderreplace3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderreplace3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuilderreplace4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuilderreplace4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuildertostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuildertostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringbuildertostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\stringbuilder", "stringbuildertostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@text.@unicodeencoding
    {
        [TestClass]
        public class @testclass_unicodeencoding
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @unicodeencodingctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodingctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodingequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodingequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetbytecount1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetbytecount1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetbytecount2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetbytecount2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetbytes2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetbytes2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetcharcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetcharcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetchars()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetchars.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetdecoder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetdecoder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetencoder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetencoder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetmaxbytecount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetmaxbytecount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetmaxcharcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetmaxcharcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetpreamble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetpreamble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unicodeencodinggetstring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\unicodeencoding", "unicodeencodinggetstring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@text.@utf8encoding
    {
        [TestClass]
        public class @testclass_utf8encoding
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @utf8encodingctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodingctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodingctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodingctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodingctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodingctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodingequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodingequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetbytecount1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetbytecount1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetbytecount2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetbytecount2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetbytes1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetbytes1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetbytes2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetbytes2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetcharcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetcharcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetchars()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetchars.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetdecoder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetdecoder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetencoder()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetencoder.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetmaxbytecount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetmaxbytecount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetmaxcharcount()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetmaxcharcount.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetpreamble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetpreamble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @utf8encodinggetstring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\text\utf8encoding", "utf8encodinggetstring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@threading.@autoresetevent
    {
        [TestClass]
        public class @testclass_autoresetevent
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @autoreseteventctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\autoresetevent", "autoreseteventctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @autoreseteventreset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\autoresetevent", "autoreseteventreset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @autoreseteventset()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\autoresetevent", "autoreseteventset.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@threading.@interlocked
    {
        [TestClass]
        public class @testclass_interlocked
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @interlockedadd1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedadd1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedadd2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedadd2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedcompareexchange1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedcompareexchange1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedcompareexchange5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedcompareexchange5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedcompareexchange6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedcompareexchange6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedcompareexchange7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedcompareexchange7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockeddecrement1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockeddecrement1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockeddecrement2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockeddecrement2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedexchange1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedexchange1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedexchange5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedexchange5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedexchange6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedexchange6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedexchange7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedexchange7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedincrement1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedincrement1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interlockedincrement2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\interlocked", "interlockedincrement2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@threading.@manualresetevent
    {
        [TestClass]
        public class @testclass_manualresetevent
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @manualreseteventctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\manualresetevent", "manualreseteventctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@threading.@timeout
    {
        [TestClass]
        public class @testclass_timeout
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @timeoutinfinite()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\timeout", "timeoutinfinite.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@threading.@waithandle
    {
        [TestClass]
        public class @testclass_waithandle
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @waithandlector()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\waithandle", "waithandlector.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @waithandledispose1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\waithandle", "waithandledispose1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @waithandledispose3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\threading\waithandle", "waithandledispose3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@timeoutexception
    {
        [TestClass]
        public class @testclass_timeoutexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @timeoutexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timeoutexception", "timeoutexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timeoutexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timeoutexception", "timeoutexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timeoutexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timeoutexception", "timeoutexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@timespan
    {
        [TestClass]
        public class @testclass_timespan
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @timespanadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespancompare1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespancompare1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespancompareto2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespancompareto2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanctor4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanctor4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanduration()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanduration.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanequals3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanequals3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanfromticks()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanfromticks.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespangethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespangethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanmaxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanmaxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanminvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanminvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespannegate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespannegate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespansupport()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespansupport.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanticks()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanticks.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanticksperday()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanticksperday.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanticksperhour()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanticksperhour.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanticksperminute()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanticksperminute.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespantickspersecond()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespantickspersecond.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespantostring_str()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespantostring_str.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespantotaldays()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespantotaldays.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespantotalhours()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespantotalhours.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespantotalmilliseconds()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespantotalmilliseconds.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespantotalminutes()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespantotalminutes.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespantotalseconds()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespantotalseconds.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @timespanzero()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\timespan", "timespanzero.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@type
    {
        [TestClass]
        public class @testclass_type
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @typeequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typeequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typeequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typegetarrayrank()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typegetarrayrank.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typegetelementtype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typegetelementtype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typegetgenerictypedefinition()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typegetgenerictypedefinition.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typegethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typegethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typegettype1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typegettype1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typegettype2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typegettype2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typegettypefromhandle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typegettypefromhandle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typehaselementtypeimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typehaselementtypeimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeisbyrefimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typeisbyrefimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeispointerimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typeispointerimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typemakearraytype1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typemakearraytype1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typemakearraytype2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typemakearraytype2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typemakebyreftype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typemakebyreftype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typemakepointertype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typemakepointertype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typetostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\type", "typetostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@typecode
    {
        [TestClass]
        public class @testclass_typecode
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @typecodeboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodebyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodebyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodechar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodechar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodedatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodedatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodedecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodedecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodedouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodedouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeempty()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeempty.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeobject()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeobject.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodesbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodesbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodesingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodesingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodestring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodestring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeuint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeuint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeuint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeuint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typecodeuint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typecode", "typecodeuint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@typeloadexception
    {
        [TestClass]
        public class @testclass_typeloadexception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @typeloadexceptionctor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typeloadexception", "typeloadexceptionctor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeloadexceptionctor2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typeloadexception", "typeloadexceptionctor2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeloadexceptionctor3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typeloadexception", "typeloadexceptionctor3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @typeloadexceptionmessage()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\typeloadexception", "typeloadexceptionmessage.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@uint16
    {
        [TestClass]
        public class @testclass_uint16
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @uint16compareto1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16compareto1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16equals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16equals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16equals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16equals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16iconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16iconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16parse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16parse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16parse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16parse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16parse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16parse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16tostring3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16tostring3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16tostring4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16tostring4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16tryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint16", "uint16tryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@uint32
    {
        [TestClass]
        public class @testclass_uint32
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @uint32compareto2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32compareto2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32equals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32equals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32equals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32equals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32iconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32iconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32maxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32maxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32minvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32minvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32parse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32parse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32parse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32parse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32parse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32parse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32tostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32tostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32tryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint32", "uint32tryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@uint64
    {
        [TestClass]
        public class @testclass_uint64
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @uint64gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletoboolean()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletoboolean.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletobyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletobyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletochar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletochar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletodatetime()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletodatetime.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletodecimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletodecimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletodouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletodouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletoint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletoint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletoint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletoint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletoint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletoint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletosbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletosbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletosingle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletosingle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletotype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletotype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletouint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletouint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64iconvertibletouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64iconvertibletouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64maxvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64maxvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64minvalue()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64minvalue.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64parse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64parse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64parse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64parse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64parse3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64parse3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64tostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64tostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64tryparse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uint64", "uint64tryparse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@uintptr
    {
        [TestClass]
        public class @testclass_uintptr
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @uintptrctor_uint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrctor_uint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrctor_uint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrctor_uint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrctor_voidptr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrctor_voidptr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrgethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrgethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrsize()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrsize.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrtopointer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrtopointer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrtostring()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrtostring.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrtouint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrtouint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrtouint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrtouint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uintptrzero()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\uintptr", "uintptrzero.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@valuetype
    {
        [TestClass]
        public class @testclass_valuetype
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @valuetypeequals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\valuetype", "valuetypeequals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuetypeequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\valuetype", "valuetypeequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@version
    {
        [TestClass]
        public class @testclass_version
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @versionbuild()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versionbuild.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versioncompareto2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versioncompareto2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versionctor4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versionctor4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versionequals1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versionequals1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versionequals2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versionequals2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versiongethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versiongethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versionmajor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versionmajor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versionrevision()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versionrevision.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versiontostring1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versiontostring1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @versiontostring2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\version", "versiontostring2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@cti.@system.@weakreference
    {
        [TestClass]
        public class @testclass_weakreference
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @helper()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "helper.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @weakreferencector1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "weakreferencector1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @weakreferencector2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "weakreferencector2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @weakreferencector2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "weakreferencector2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @weakreferenceisalive()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "weakreferenceisalive.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @weakreferenceisaliveb()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "weakreferenceisaliveb.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @weakreferencetargetb()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "weakreferencetargetb.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @weakreferencetrackresurrection_cti()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\cti\system\weakreference", "weakreferencetrackresurrection_cti.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@reflection.@assembly
    {
        [TestClass]
        public class @testclass_assembly
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @testassembly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\reflection\assembly", "testassembly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@buffer
    {
        [TestClass]
        public class @testclass_buffer
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @asurt_99893()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\buffer", "asurt_99893.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@datetime
    {
        [TestClass]
        public class @testclass_datetime
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @co7510parseexact_formatarray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\datetime", "co7510parseexact_formatarray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@delegate.@generics
    {
        [TestClass]
        public class @testclass_generics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @common()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\generics", "common.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @negativegenerics()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\generics", "negativegenerics.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ng_standard()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\generics", "ng_standard.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullabletypes()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\generics", "nullabletypes.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@delegate.@miscellaneous
    {
        [TestClass]
        public class @testclass_miscellaneous
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @central()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\miscellaneous", "central.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @co6010delegateequalstwo()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\miscellaneous", "co6010delegateequalstwo.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @co6031gethashcode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\miscellaneous", "co6031gethashcode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@delegate.@threatmodel.@public
    {
        [TestClass]
        public class @testclass_public
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @testclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\threatmodel\public", "testclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testclassframeworkinternal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\threatmodel\public", "testclassframeworkinternal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@delegate.@threatmodel.@tests
    {
        [TestClass]
        public class @testclass_tests
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @bindingtarget()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\threatmodel\tests", "bindingtarget.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @critconstructorclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\threatmodel\tests", "critconstructorclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\threatmodel\tests", "testclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testclassframeworkinternal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\delegate\threatmodel\tests", "testclassframeworkinternal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@exception
    {
        [TestClass]
        public class @testclass_exception
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @data_helper()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\exception", "data_helper.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@guid
    {
        [TestClass]
        public class @testclass_guid
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @guid_parsing()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\guid", "guid_parsing.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@lazyt
    {
        [TestClass]
        public class @testclass_lazyt
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @lazyttf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\lazyt", "lazyttf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@reflection.@assembly
    {
        [TestClass]
        public class @testclass_assembly
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @server1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\reflection\assembly", "server1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @server2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\reflection\assembly", "server2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @server3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\reflection\assembly", "server3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @server4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\reflection\assembly", "server4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@resources.@resourcemanager
    {
        [TestClass]
        public class @testclass_resourcemanager
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @customculture()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\resources\resourcemanager", "customculture.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@text.@encoding
    {
        [TestClass]
        public class @testclass_encoding
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @shift_jis()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\text\encoding", "shift_jis.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @CoreMangLib.@system.@version
    {
        [TestClass]
        public class @testclass_version
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @version_parsing()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"CoreMangLib\system\version", "version_parsing.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Exceptions.@Finalization
    {
        [TestClass]
        public class @testclass_Finalization
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Finalizer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Exceptions\Finalization", "Finalizer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@API.@GCSettings
    {
        [TestClass]
        public class @testclass_GCSettings
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ILatencyTest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\API\GCSettings", "ILatencyTest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @InducedGen0GC()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\API\GCSettings", "InducedGen0GC.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @InducedGen1GC()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\API\GCSettings", "InducedGen1GC.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @InducedGen2GC()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\API\GCSettings", "InducedGen2GC.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Coverage
    {
        [TestClass]
        public class @testclass_Coverage
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @LargeObjectAlloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Coverage", "LargeObjectAlloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @LargeObjectAlloc2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Coverage", "LargeObjectAlloc2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Features.@HeapExpansion
    {
        [TestClass]
        public class @testclass_HeapExpansion
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Finalizer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\HeapExpansion", "Finalizer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCUtil()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\HeapExpansion", "GCUtil.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Handles()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\HeapExpansion", "Handles.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Features.@Pinning.@PinningOther
    {
        [TestClass]
        public class @testclass_PinningOther
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @GCUtil()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\Pinning\PinningOther", "GCUtil.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @PinnedCollect()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\Pinning\PinningOther", "PinnedCollect.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @PinnedHandle()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\Pinning\PinningOther", "PinnedHandle.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @PinnedInt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\Pinning\PinningOther", "PinnedInt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @PinnedMany()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\Pinning\PinningOther", "PinnedMany.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @PinnedMultiple()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\Pinning\PinningOther", "PinnedMultiple.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @PinnedObject()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Features\Pinning\PinningOther", "PinnedObject.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Performance.@Framework
    {
        [TestClass]
        public class @testclass_Framework
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @PerfTests()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework", "PerfTests.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ProcessFactory()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework", "ProcessFactory.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Performance.@Framework.@Metrics
    {
        [TestClass]
        public class @testclass_Metrics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @CollectGCMetricsAttribute()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics", "CollectGCMetricsAttribute.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCMetricDiscoverer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics", "GCMetricDiscoverer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCMetrics()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics", "GCMetrics.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Performance.@Framework.@Metrics.@Builders
    {
        [TestClass]
        public class @testclass_Builders
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @CircularBuffer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics\Builders", "CircularBuffer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CondemnedReasonGroup()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics\Builders", "CondemnedReasonGroup.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DictionaryExtensions()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics\Builders", "DictionaryExtensions.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCEvent()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics\Builders", "GCEvent.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCInfo()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics\Builders", "GCInfo.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCProcess()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics\Builders", "GCProcess.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ThreadWorkSpan()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Framework\Metrics\Builders", "ThreadWorkSpan.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Performance.@Tests
    {
        [TestClass]
        public class @testclass_Tests
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Allocation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "Allocation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ConcurrentSpin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "ConcurrentSpin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @EEGC()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "EEGC.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCSimulator()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "GCSimulator.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @LargeStrings()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "LargeStrings.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lifetimefx()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "lifetimefx.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @MidLife()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "MidLife.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Node()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "Node.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SleepThread()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Performance\Tests", "SleepThread.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Scenarios.@Boxing
    {
        [TestClass]
        public class @testclass_Boxing
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @doubLink()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Scenarios\Boxing", "doubLink.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Scenarios.@DoublinkList
    {
        [TestClass]
        public class @testclass_DoublinkList
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @DoubLink()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Scenarios\DoublinkList", "DoubLink.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @GC.@Scenarios.@FinalNStruct
    {
        [TestClass]
        public class @testclass_FinalNStruct
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @strmap()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"GC\Scenarios\FinalNStruct", "strmap.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @hosting.@coreclr.@activation.@sxshost
    {
        [TestClass]
        public class @testclass_sxshost
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @delegates()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"hosting\coreclr\activation\sxshost", "delegates.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @usercases()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"hosting\coreclr\activation\sxshost", "usercases.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @usercode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"hosting\coreclr\activation\sxshost", "usercode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @hosting.@samples.@hosting.@usercode
    {
        [TestClass]
        public class @testclass_usercode
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_usercode()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"hosting\samples\hosting\usercode", "usercode.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @hosting.@samples.@resolveevent.@usercodedependency
    {
        [TestClass]
        public class @testclass_usercodedependency
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_usercodedependency()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"hosting\samples\resolveevent\usercodedependency", "usercodedependency.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Interop.@ICastable
    {
        [TestClass]
        public class @testclass_ICastable
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_Castable()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Interop\ICastable", "Castable.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Interop.@NativeCallable
    {
        [TestClass]
        public class @testclass_NativeCallable
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @NativeCallableTest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Interop\NativeCallable", "NativeCallableTest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Interop.@ReversePInvoke.@Marshalling
    {
        [TestClass]
        public class @testclass_Marshalling
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @MarshalBoolArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Interop\ReversePInvoke\Marshalling", "MarshalBoolArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@CodeGenBringUpTests
    {
        [TestClass]
        public class @testclass_CodeGenBringUpTests
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Add1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Add1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @addref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "addref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @And1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "And1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AndRef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "AndRef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Args4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Args4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Args5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Args5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AsgAdd1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "AsgAdd1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AsgAnd1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "AsgAnd1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AsgOr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "AsgOr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AsgSub1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "AsgSub1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AsgXor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "AsgXor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BinaryRMW()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "BinaryRMW.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Call1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Call1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CnsBool()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "CnsBool.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CnsLng1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "CnsLng1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblAdd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblAdd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblAddConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblAddConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblArea()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblArea.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblAvg2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblAvg2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblAvg6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblAvg6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblCall1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblCall1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblCall2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblCall2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblDist()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblDist.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblDiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblDiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblDivConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblDivConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblFillArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblFillArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblMul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblMul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblMulConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblMulConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblNeg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblNeg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblRem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblRem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblRoots()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblRoots.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblSub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblSub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblSubConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblSubConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DblVar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "DblVar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @div1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "div1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @div2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "div2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @divref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "divref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Eq1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Eq1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FactorialRec()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FactorialRec.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FibLoop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FibLoop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FiboRec()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FiboRec.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPAdd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPAdd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPAddConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPAddConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPArea()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPArea.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPAvg2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPAvg2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPAvg6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPAvg6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPCall1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPCall1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPCall2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPCall2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPConvDbl2Lng()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPConvDbl2Lng.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPConvF2F()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPConvF2F.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPConvF2I()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPConvF2I.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPConvF2Lng()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPConvF2Lng.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPConvI2F()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPConvI2F.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPDist()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPDist.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPDiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPDiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPDivConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPDivConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPError()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPError.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPFillArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPFillArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPMath()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPMath.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPMul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPMul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPMulConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPMulConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPNeg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPNeg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPRem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPRem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPRoots()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPRoots.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPSmall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPSmall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPSub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPSub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPSubConst()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPSubConst.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FPVar()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "FPVar.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Gcd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Gcd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Ge1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Ge1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Gt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Gt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Ind1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Ind1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @InitObj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "InitObj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @InstanceCalls()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "InstanceCalls.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @IntArraySum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "IntArraySum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @IntConv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "IntConv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Jmp1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Jmp1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrue1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrue1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueEqDbl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueEqDbl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueEqFP()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueEqFP.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueEqInt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueEqInt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueGeDbl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueGeDbl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueGeFP()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueGeFP.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueGeInt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueGeInt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueGtDbl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueGtDbl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueGtFP()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueGtFP.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueGtInt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueGtInt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueLeDbl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueLeDbl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueLeFP()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueLeFP.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueLeInt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueLeInt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueLtDbl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueLtDbl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueLtFP()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueLtFP.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueLtInt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueLtInt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueNeDbl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueNeDbl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueNeFP()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueNeFP.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JTrueNeInt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "JTrueNeInt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Le1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Le1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @LeftShift()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "LeftShift.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @LngConv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "LngConv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Localloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Localloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @LocallocLarge()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "LocallocLarge.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @LongArgsAndReturn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "LongArgsAndReturn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Lt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Lt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mul1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "mul1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mul2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "mul2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mul3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "mul3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mul4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "mul4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Ne1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Ne1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NegRMW()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "NegRMW.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NestedCall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "NestedCall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NotAndNeg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "NotAndNeg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NotRMW()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "NotRMW.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ObjAlloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "ObjAlloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @OpMembersOfStructLocal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "OpMembersOfStructLocal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Or1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Or1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @OrRef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "OrRef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rem1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "rem1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @RightShiftRef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "RightShiftRef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Rotate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Rotate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StaticCalls()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "StaticCalls.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StaticValueField()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "StaticValueField.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructFldAddr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "StructFldAddr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructInstMethod()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "StructInstMethod.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Sub1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Sub1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SubRef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "SubRef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Swap()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Swap.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Switch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Switch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Unbox()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Unbox.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Xor1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "Xor1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @XorRef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\CodeGenBringUpTests", "XorRef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@Arrays
    {
        [TestClass]
        public class @testclass_Arrays
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @complex1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\Arrays", "complex1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @complex2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\Arrays", "complex2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simple1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\Arrays", "simple1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simple2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\Arrays", "simple2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@CheckedCtor
    {
        [TestClass]
        public class @testclass_CheckedCtor
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Base_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Base_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Base_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Base_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Base_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Base_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Base_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Base_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Base_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Base_6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Peer_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Peer_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Peer_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Peer_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Peer_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Peer_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Peer_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Peer_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Generic_Test_CSharp_Peer_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Generic_Test_CSharp_Peer_6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Base_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Base_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Base_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Base_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Base_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Base_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Base_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Base_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Peer_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Peer_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Peer_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Peer_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Peer_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Peer_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Test_CSharp_Peer_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\CheckedCtor", "Test_CSharp_Peer_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@cmov
    {
        [TestClass]
        public class @testclass_cmov
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Bool_And_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Bool_And_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Bool_No_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Bool_No_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Bool_Or_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Bool_Or_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Bool_Xor_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Bool_Xor_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Double_And_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Double_And_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Double_No_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Double_No_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Double_Or_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Double_Or_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Double_Xor_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Double_Xor_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Float_And_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Float_And_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Float_No_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Float_No_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Float_Or_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Float_Or_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Float_Xor_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Float_Xor_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Int_And_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Int_And_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Int_No_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Int_No_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Int_Or_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Int_Or_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Int_Xor_Op()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\cmov", "Int_Xor_Op.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@Convert
    {
        [TestClass]
        public class @testclass_Convert
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @FPZero()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\Convert", "FPZero.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@coverage.@flowgraph
    {
        [TestClass]
        public class @testclass_flowgraph
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @xaddmuly()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\flowgraph", "xaddmuly.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@coverage.@oldtests
    {
        [TestClass]
        public class @testclass_oldtests
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @_33objref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "33objref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cse1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "cse1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cse2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "cse2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lclfldadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "lclfldadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lclflddiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "lclflddiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lclfldmul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "lclfldmul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lclfldrem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "lclfldrem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lclfldsub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\coverage\oldtests", "lclfldsub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@forceinlining
    {
        [TestClass]
        public class @testclass_forceinlining
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @LargeNumberOfArgs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\forceinlining", "LargeNumberOfArgs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NoMetaData()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\forceinlining", "NoMetaData.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Recursion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\forceinlining", "Recursion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@gettypetypeof
    {
        [TestClass]
        public class @testclass_gettypetypeof
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @gettypetypeofmatrix()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\gettypetypeof", "gettypetypeofmatrix.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@intrinsic.@interlocked
    {
        [TestClass]
        public class @testclass_interlocked
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @cmpxchg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\interlocked", "cmpxchg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @cse_cmpxchg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\interlocked", "cse_cmpxchg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @IntrinsicTest_Overflow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\interlocked", "IntrinsicTest_Overflow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nullchecksuppress()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\interlocked", "nullchecksuppress.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regalloc1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\interlocked", "regalloc1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @regalloc2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\interlocked", "regalloc2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@intrinsic.@pow
    {
        [TestClass]
        public class @testclass_pow
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @pow0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\pow", "pow0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @pow1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\pow", "pow1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @pow2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\pow", "pow2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @pow3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\intrinsic\pow", "pow3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@lifetime
    {
        [TestClass]
        public class @testclass_lifetime
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @lifetime1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\lifetime", "lifetime1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lifetime2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\lifetime", "lifetime2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@localloc
    {
        [TestClass]
        public class @testclass_localloc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @localloc3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\localloc", "localloc3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@Misc.@gettype
    {
        [TestClass]
        public class @testclass_gettype
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @gettypetypeofmatrix()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\Misc\gettype", "gettypetypeofmatrix.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@newarr
    {
        [TestClass]
        public class @testclass_newarr
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_newarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\newarr", "newarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@nullabletypes
    {
        [TestClass]
        public class @testclass_nullabletypes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @invokecommon()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\nullabletypes", "invokecommon.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unboxnullable()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\nullabletypes", "unboxnullable.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @value()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\nullabletypes", "value.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@perffix.@commutativecse
    {
        [TestClass]
        public class @testclass_commutativecse
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @CCSE()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\perffix\commutativecse", "CCSE.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@perffix.@primitivevt
    {
        [TestClass]
        public class @testclass_primitivevt
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @mixed1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\perffix\primitivevt", "mixed1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mixed2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\perffix\primitivevt", "mixed2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@pinvoke
    {
        [TestClass]
        public class @testclass_pinvoke
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @sin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\pinvoke", "sin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sysinfo()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\pinvoke", "sysinfo.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@PREFIX.@PrimitiveVT
    {
        [TestClass]
        public class @testclass_PrimitiveVT
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @callconv1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\PREFIX\PrimitiveVT", "callconv1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @callconv2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\PREFIX\PrimitiveVT", "callconv2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @helper()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\PREFIX\PrimitiveVT", "helper.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@shift
    {
        [TestClass]
        public class @testclass_shift
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @int16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\shift", "int16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\shift", "int32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\shift", "int64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint16()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\shift", "uint16.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\shift", "uint32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\shift", "uint64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\shift", "uint8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@StrAccess
    {
        [TestClass]
        public class @testclass_StrAccess
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @straccess1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StrAccess", "straccess1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @straccess2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StrAccess", "straccess2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @straccess3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StrAccess", "straccess3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @straccess4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StrAccess", "straccess4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@StructABI
    {
        [TestClass]
        public class @testclass_StructABI
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_StructABI()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructABI", "StructABI.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructABI_OSX()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructABI", "StructABI.OSX.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructABI_Unix()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructABI", "StructABI.Unix.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructABI_Windows()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructABI", "StructABI.Windows.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@StructPromote
    {
        [TestClass]
        public class @testclass_StructPromote
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @SP1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP1a()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP1a.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP1a2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP1a2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP1c()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP1c.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP1d()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP1d.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP2a()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP2a.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP2b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP2b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SP2c()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SP2c.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SpAddr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SpAddr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SpAddrAT()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\StructPromote", "SpAddrAT.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@TypedReference
    {
        [TestClass]
        public class @testclass_TypedReference
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_TypedReference()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\TypedReference", "TypedReference.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Directed.@UnrollLoop
    {
        [TestClass]
        public class @testclass_UnrollLoop
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Dev10_846218()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\UnrollLoop", "Dev10_846218.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @loop1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\UnrollLoop", "loop1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @loop2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\UnrollLoop", "loop2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @loop4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\UnrollLoop", "loop4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @loop6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Directed\UnrollLoop", "loop6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Arrays.@ConstructedTypes.@Jagged
    {
        [TestClass]
        public class @testclass_Jagged
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class01_instance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class01_instance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class01_static()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class01_static.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "class07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struc01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struc01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "Struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct01_instance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "Struct01_instance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct01_static()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struct01_static.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struct03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struct04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struct05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struct06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct07()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\Jagged", "struct07.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Arrays.@ConstructedTypes.@MultiDim
    {
        [TestClass]
        public class @testclass_MultiDim
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\MultiDim", "class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class01_Instance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\MultiDim", "class01_Instance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class01_static()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\MultiDim", "class01_static.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\MultiDim", "struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct01_Instance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\MultiDim", "struct01_Instance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct01_static()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\ConstructedTypes\MultiDim", "struct01_static.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Arrays.@TypeParameters.@Jagged
    {
        [TestClass]
        public class @testclass_Jagged
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\TypeParameters\Jagged", "class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\TypeParameters\Jagged", "struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Arrays.@TypeParameters.@MultiDim
    {
        [TestClass]
        public class @testclass_MultiDim
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\TypeParameters\MultiDim", "class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Arrays\TypeParameters\MultiDim", "struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@ConstrainedCall
    {
        [TestClass]
        public class @testclass_ConstrainedCall
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @class1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\ConstrainedCall", "class1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\ConstrainedCall", "class2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @vt1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\ConstrainedCall", "vt1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @vt2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\ConstrainedCall", "vt2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @vt3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\ConstrainedCall", "vt3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @vt4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\ConstrainedCall", "vt4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Constraints
    {
        [TestClass]
        public class @testclass_Constraints
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Call_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Constraints", "Call_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Call_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Constraints", "Call_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Convert_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Constraints", "Convert_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Convert_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Constraints", "Convert_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Transitive_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Constraints", "Transitive_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Transitive_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Constraints", "Transitive_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Conversions.@Boxing
    {
        [TestClass]
        public class @testclass_Boxing
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @box_unbox01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Boxing", "box_unbox01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Conversions.@Reference
    {
        [TestClass]
        public class @testclass_Reference
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @GenToGen01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "GenToGen01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GenToGen02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "GenToGen02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GenToGen03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "GenToGen03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GenToNonGen01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "GenToNonGen01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GenToNonGen02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "GenToNonGen02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GenToNonGen03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "GenToNonGen03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NonGenToGen01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "NonGenToGen01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NonGenToGen02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "NonGenToGen02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NonGenToGen03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Conversions\Reference", "NonGenToGen03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Coverage
    {
        [TestClass]
        public class @testclass_Coverage
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @chaos55915408cs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Coverage", "chaos55915408cs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chaos56200037cs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Coverage", "chaos56200037cs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @chaos65204782cs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Coverage", "chaos65204782cs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Exceptions
    {
        [TestClass]
        public class @testclass_Exceptions
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @general_class_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "general_class_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @general_class_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "general_class_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @general_struct_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "general_struct_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @general_struct_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "general_struct_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_class_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_class_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_class_instance02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_class_instance02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_class_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_class_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_class_static02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_class_static02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_struct_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_struct_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_struct_instance02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_struct_instance02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_struct_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_struct_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @specific_struct_static02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Exceptions", "specific_struct_static02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Fields
    {
        [TestClass]
        public class @testclass_Fields
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @instance_assignment_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "instance_assignment_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_assignment_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "instance_assignment_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_equalnull_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "instance_equalnull_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_equalnull_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "instance_equalnull_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_passing_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "instance_passing_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_passing_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "instance_passing_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_assignment_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "static_assignment_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_assignment_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "static_assignment_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_equalnull_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "static_equalnull_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_equalnull_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "static_equalnull_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_passing_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "static_passing_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_passing_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Fields", "static_passing_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Instantiation.@Classes
    {
        [TestClass]
        public class @testclass_Classes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @BaseClass01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "BaseClass01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BaseClass02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "BaseClass02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BaseClass03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "BaseClass03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Baseclass04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "Baseclass04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Baseclass05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "Baseclass05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "class02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Classes", "class03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Instantiation.@Interfaces
    {
        [TestClass]
        public class @testclass_Interfaces
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Class02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Class02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Class03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Class03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Class04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Class04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Class05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Class05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Struct03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Struct04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Interfaces", "Struct05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Instantiation.@Structs
    {
        [TestClass]
        public class @testclass_Structs
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Structs", "struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Structs", "struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Instantiation\Structs", "struct03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Locals
    {
        [TestClass]
        public class @testclass_Locals
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @instance_assignment_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "instance_assignment_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_assignment_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "instance_assignment_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_equalnull_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "instance_equalnull_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_equalnull_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "instance_equalnull_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_passing_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "instance_passing_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_passing_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "instance_passing_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_assignment_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "static_assignment_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_assignment_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "static_assignment_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_equalnull_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "static_equalnull_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_equalnull_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "static_equalnull_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_passing_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "static_passing_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_passing_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Locals", "static_passing_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@MemberAccess
    {
        [TestClass]
        public class @testclass_MemberAccess
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @class_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "class_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "class_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interface_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "interface_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interface_class02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "interface_class02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interface_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "interface_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interface_struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "interface_struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct_instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "struct_instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct_static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\MemberAccess", "struct_static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Parameters
    {
        [TestClass]
        public class @testclass_Parameters
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @instance_assignment_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "instance_assignment_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_assignment_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "instance_assignment_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_equalnull_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "instance_equalnull_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_equalnull_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "instance_equalnull_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_passing_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "instance_passing_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance_passing_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "instance_passing_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_assignment_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "static_assignment_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_assignment_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "static_assignment_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_equalnull_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "static_equalnull_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_equalnull_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "static_equalnull_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_passing_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "static_passing_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static_passing_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Parameters", "static_passing_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@pinvoke
    {
        [TestClass]
        public class @testclass_pinvoke
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @instance01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\pinvoke", "instance01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\pinvoke", "instance02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @instance03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\pinvoke", "instance03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\pinvoke", "static01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @static02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\pinvoke", "static02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@Typeof
    {
        [TestClass]
        public class @testclass_Typeof
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "class02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @class03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "class03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dynamicTypes()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "dynamicTypes.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objectBoxing()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "objectBoxing.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refTypesdynamic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "refTypesdynamic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "Struct02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "struct03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valueTypeBoxing()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\Typeof", "valueTypeBoxing.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Generics.@TypeParameters
    {
        [TestClass]
        public class @testclass_TypeParameters
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @default_class01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\TypeParameters", "default_class01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @default_struct01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Generics\TypeParameters", "default_struct01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@ebvts.@cs.@generics.@generics
    {
        [TestClass]
        public class @testclass_generics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @repro52()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\ebvts\cs\generics\generics", "repro52.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@eh.@basics
    {
        [TestClass]
        public class @testclass_basics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @loopEH()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\eh\basics", "loopEH.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@eh.@Common
    {
        [TestClass]
        public class @testclass_Common
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @common()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\eh\Common", "common.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@eh.@FinallyExec
    {
        [TestClass]
        public class @testclass_FinallyExec
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @nestedTryRegionsWithSameOffset1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\eh\FinallyExec", "nestedTryRegionsWithSameOffset1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nestedTryRegionsWithSameOffset2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\eh\FinallyExec", "nestedTryRegionsWithSameOffset2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nestedTryRegionsWithSameOffset3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\eh\FinallyExec", "nestedTryRegionsWithSameOffset3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nonlocalgotoinatryblockinahandler()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\eh\FinallyExec", "nonlocalgotoinatryblockinahandler.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@eh.@Leaves
    {
        [TestClass]
        public class @testclass_Leaves
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @nonlocalexitfromnestedcatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\eh\Leaves", "nonlocalexitfromnestedcatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@gc.@misc
    {
        [TestClass]
        public class @testclass_misc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @_148343()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "148343.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_9param()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "9param.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_9_and_alloca2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "9_and_alloca2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @alloca3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "alloca3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @eh1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "eh1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fgtest1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "fgtest1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fgtest2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "fgtest2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @funclet()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "funclet.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gc_pinned_code_motion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "gc-pinned-code-motion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcparaminreg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "gcparaminreg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ret_struct_test1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "ret_struct_test1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ret_struct_test4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "ret_struct_test4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simple1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "simple1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct1_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct1_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct1_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct1_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct1_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct1_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct2_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct2_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct2_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct2_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct2_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct2_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct2_5_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct2_5_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct3_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct3_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct3_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct3_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct3_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct3_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct4_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct4_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct4_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct4_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct4_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct4_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct5_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct5_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct5_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct5_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct5_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct5_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct6_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct6_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct6_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct6_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct6_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct6_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct7_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct7_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct9_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "struct9_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp1_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp1_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp1_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp1_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp1_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp1_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp1_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp1_5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp1_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp1_6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp2_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp2_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp2_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp2_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp2_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp2_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp2_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp2_4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp3_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp3_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp4_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp4_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp5_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp5_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfp6_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfp6_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfpseh5_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfpseh5_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structfpseh6_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structfpseh6_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structref1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structref1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret1_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret1_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret1_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret1_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret2_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret2_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret2_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret2_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret2_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret2_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret3_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret3_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret3_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret3_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret3_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret3_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret4_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret4_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret4_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret4_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret4_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret4_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret5_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret5_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret5_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret5_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret5_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret5_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret6_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret6_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret6_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret6_2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structret6_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structret6_3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structva1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "structva1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "test1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "test2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "test3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test_noalloca()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "test_noalloca.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @vbil()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\gc\misc", "vbil.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@hfa.@main.@dll
    {
        [TestClass]
        public class @testclass_dll
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @common()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "common.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_common_nd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_common_nd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_common_nf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_common_nf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_common_sd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_common_sd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_common_sf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_common_sf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_interop_nd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_interop_nd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_interop_nf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_interop_nf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_interop_sd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_interop_sd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_interop_sf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_interop_sf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_managed_nd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_managed_nd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_managed_nf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_managed_nf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_managed_sd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_managed_sd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hfa_managed_sf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\dll", "hfa_managed_sf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@hfa.@main.@testA
    {
        [TestClass]
        public class @testclass_testA
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @hfa_testA()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\testA", "hfa_testA.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@hfa.@main.@testB
    {
        [TestClass]
        public class @testclass_testB
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @hfa_testB()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\testB", "hfa_testB.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@hfa.@main.@testC
    {
        [TestClass]
        public class @testclass_testC
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @hfa_testC()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\testC", "hfa_testC.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@hfa.@main.@testE
    {
        [TestClass]
        public class @testclass_testE
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @hfa_testE()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\testE", "hfa_testE.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@hfa.@main.@testG
    {
        [TestClass]
        public class @testclass_testG
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @hfa_testG()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\hfa\main\testG", "hfa_testG.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@cg.@CGRecurse
    {
        [TestClass]
        public class @testclass_CGRecurse
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @CGRecurseAAA()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cg\CGRecurse", "CGRecurseAAA.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CGRecurseAAC()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cg\CGRecurse", "CGRecurseAAC.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CGRecurseACA()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cg\CGRecurse", "CGRecurseACA.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CGRecurseACC()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cg\CGRecurse", "CGRecurseACC.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@cprop
    {
        [TestClass]
        public class @testclass_cprop
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @cprop001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cprop", "cprop001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @implicitDownConv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cprop", "implicitDownConv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@cse
    {
        [TestClass]
        public class @testclass_cse
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arrayexpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "arrayexpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arrayexpr2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "arrayexpr2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldexpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "fieldexpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldexpr1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "fieldexpr1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldexpr2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "fieldexpr2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @fieldExprUnchecked1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "fieldExprUnchecked1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @HugeArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "HugeArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @HugeArray1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "HugeArray1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hugeexpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "hugeexpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @HugeField1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "HugeField1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @HugeField2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "HugeField2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hugeSimpleExpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "hugeSimpleExpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mixedexpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "mixedexpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @pointerexpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "pointerexpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @pointerexpr1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "pointerexpr1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simpleexpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "simpleexpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simpleexpr1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "simpleexpr1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simpleexpr2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "simpleexpr2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simpleexpr3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "simpleexpr3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simpleexpr4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "simpleexpr4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @staticFieldExpr1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "staticFieldExpr1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @staticFieldExpr1_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "staticFieldExpr1_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @staticFieldExprUnchecked1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "staticFieldExprUnchecked1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @volatilefield()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "volatilefield.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @volatilestaticfield()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "volatilestaticfield.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VolatileTest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\cse", "VolatileTest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@inl
    {
        [TestClass]
        public class @testclass_inl
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @caninline()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\inl", "caninline.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@lim
    {
        [TestClass]
        public class @testclass_lim
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @lim_002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\lim", "lim_002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@lur
    {
        [TestClass]
        public class @testclass_lur
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @lur_02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\lur", "lur_02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@osr
    {
        [TestClass]
        public class @testclass_osr
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @osr001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\osr", "osr001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@opt.@rngchk
    {
        [TestClass]
        public class @testclass_rngchk
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ArrayBound()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "ArrayBound.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ArrayWith2Loops()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "ArrayWith2Loops.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ArrayWithFunc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "ArrayWithFunc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ArrayWithThread()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "ArrayWithThread.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BadMatrixMul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "BadMatrixMul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @JaggedArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "JaggedArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @MatrixMul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "MatrixMul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SimpleArray_01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\opt\rngchk", "SimpleArray_01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@rtchecks.@overflow
    {
        [TestClass]
        public class @testclass_overflow
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @overflow01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\rtchecks\overflow", "overflow01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @overflow02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\rtchecks\overflow", "overflow02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @overflow03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\rtchecks\overflow", "overflow03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @overflow04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\rtchecks\overflow", "overflow04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@box_unbox
    {
        [TestClass]
        public class @testclass_box_unbox
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @structdef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox", "structdef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@box_unbox.@box_unbox
    {
        [TestClass]
        public class @testclass_box_unbox
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @box_unbox001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox019()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox019.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox020()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox020.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox021()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox021.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox022()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox022.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox023()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox023.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox024()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox024.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox025()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox025.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox026()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox026.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox027()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox027.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox028()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox028.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox029()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox029.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox030()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox030.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox031()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox031.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox032()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox032.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox033()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox033.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox034()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox034.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox037()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox037.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox038()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox038.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox039()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox039.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox040()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox040.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox041()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox041.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox042()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox042.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox043()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox043.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox044()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox044.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox045()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\box-unbox", "box-unbox045.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@box_unbox.@enum
    {
        [TestClass]
        public class @testclass_enum
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @box_unbox_enum001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\enum", "box-unbox-enum001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_enum002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\enum", "box-unbox-enum002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_enum003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\enum", "box-unbox-enum003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@box_unbox.@generics
    {
        [TestClass]
        public class @testclass_generics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @box_unbox_generics001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics019()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics019.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics020()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics020.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics021()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics021.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics022()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics022.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics023()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics023.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics024()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics024.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics025()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics025.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics026()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics026.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics027()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics027.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics028()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics028.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics029()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics029.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics030()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics030.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics031()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics031.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics032()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics032.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics033()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics033.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics034()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics034.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics037()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics037.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics038()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics038.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics039()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics039.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics040()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics040.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics041()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics041.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics042()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics042.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics043()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics043.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics044()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics044.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_generics045()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\generics", "box-unbox-generics045.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@box_unbox.@interface
    {
        [TestClass]
        public class @testclass_interface
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @box_unbox_interface001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_interface018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\interface", "box-unbox-interface018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@box_unbox.@null
    {
        [TestClass]
        public class @testclass_null
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @box_unbox_null001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null019()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null019.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null020()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null020.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null021()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null021.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null022()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null022.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null023()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null023.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null024()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null024.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null025()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null025.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null026()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null026.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null027()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null027.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null028()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null028.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null029()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null029.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null030()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null030.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null031()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null031.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null032()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null032.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null033()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null033.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null034()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null034.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null037()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null037.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null038()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null038.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null039()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null039.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null040()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null040.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null041()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null041.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null042()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null042.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null043()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null043.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null044()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null044.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_null045()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\null", "box-unbox-null045.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@box_unbox.@value
    {
        [TestClass]
        public class @testclass_value
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @box_unbox_value001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value019()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value019.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value020()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value020.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value021()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value021.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value022()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value022.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value023()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value023.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value024()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value024.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value025()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value025.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value026()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value026.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value027()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value027.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value028()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value028.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value029()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value029.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value030()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value030.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value031()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value031.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value032()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value032.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value033()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value033.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value034()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value034.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value037()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value037.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value038()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value038.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value039()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value039.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value040()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value040.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value041()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value041.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value042()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value042.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value043()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value043.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value044()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value044.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box_unbox_value045()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\box-unbox\value", "box-unbox-value045.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@castclass
    {
        [TestClass]
        public class @testclass_castclass
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @structdef()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass", "structdef.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@castclass.@castclass
    {
        [TestClass]
        public class @testclass_castclass
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @castclass001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass019()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass019.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass020()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass020.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass021()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass021.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass022()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass022.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass023()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass023.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass024()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass024.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass025()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass025.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass026()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass026.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass027()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass027.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass028()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass028.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass029()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass029.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass030()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass030.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass031()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass031.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass032()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass032.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass033()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass033.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass034()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass034.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass037()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass037.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass038()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass038.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass039()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass039.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass040()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass040.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass041()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass041.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass042()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass042.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass043()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass043.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass044()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass044.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass045()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\castclass", "castclass045.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@castclass.@enum
    {
        [TestClass]
        public class @testclass_enum
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @castclass_enum001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\enum", "castclass-enum001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_enum002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\enum", "castclass-enum002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_enum003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\enum", "castclass-enum003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@castclass.@generics
    {
        [TestClass]
        public class @testclass_generics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @castclass_generics001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics019()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics019.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics020()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics020.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics021()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics021.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics022()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics022.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics023()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics023.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics024()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics024.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics025()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics025.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics026()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics026.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics027()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics027.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics028()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics028.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics029()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics029.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics030()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics030.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics031()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics031.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics032()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics032.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics033()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics033.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics034()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics034.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics037()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics037.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics038()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics038.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics039()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics039.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics040()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics040.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics041()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics041.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics042()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics042.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics043()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics043.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics044()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics044.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_generics045()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\generics", "castclass-generics045.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@castclass.@interface
    {
        [TestClass]
        public class @testclass_interface
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @castclass_interface001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_interface018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\interface", "castclass-interface018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@jit64.@valuetypes.@nullable.@castclass.@null
    {
        [TestClass]
        public class @testclass_null
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @castclass_null001()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null001.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null002()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null002.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null003()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null003.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null004()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null004.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null005()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null005.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null006()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null006.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null007()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null007.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null008()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null008.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null009()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null009.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null010()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null010.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null011()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null011.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null012()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null012.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null013()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null013.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null014()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null014.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null015()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null015.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null016()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null016.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null017()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null017.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null018()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null018.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null019()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null019.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null020()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null020.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null021()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null021.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null022()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null022.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null023()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null023.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null024()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null024.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null025()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null025.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null026()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null026.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null027()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null027.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null028()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null028.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null029()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null029.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null030()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null030.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null031()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null031.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null032()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null032.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null033()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null033.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null034()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null034.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null037()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null037.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null038()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null038.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null039()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null039.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null040()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null040.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null041()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null041.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null042()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null042.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null043()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null043.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null044()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null044.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_null045()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\jit64\valuetypes\nullable\castclass\null", "castclass-null045.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Arrays.@lcs
    {
        [TestClass]
        public class @testclass_lcs
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_lcs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcs2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcs2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcsbas()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcsbas.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcsbox()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcsbox.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcsmax()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcsmax.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcsmixed()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcsmixed.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcsval()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcsval.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcsvalbox()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\lcs", "lcsvalbox.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Arrays.@misc
    {
        [TestClass]
        public class @testclass_misc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arrres()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\misc", "arrres.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\misc", "gcarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @selfref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Arrays\misc", "selfref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@AsgOp.@i4
    {
        [TestClass]
        public class @testclass_i4
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\i4", "i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @i4flat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\i4", "i4flat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@AsgOp.@i8
    {
        [TestClass]
        public class @testclass_i8
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_i8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\i8", "i8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @i8flat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\i8", "i8flat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@AsgOp.@r4
    {
        [TestClass]
        public class @testclass_r4
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_r4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\r4", "r4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4flat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\r4", "r4flat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@AsgOp.@r8
    {
        [TestClass]
        public class @testclass_r8
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_r8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\r8", "r8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8flat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\AsgOp\r8", "r8flat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Boxing.@callconv
    {
        [TestClass]
        public class @testclass_callconv
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @instance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\callconv", "instance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Boxing.@functional
    {
        [TestClass]
        public class @testclass_functional
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @fibo()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\functional", "fibo.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\functional", "sin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Boxing.@misc
    {
        [TestClass]
        public class @testclass_misc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @enum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\misc", "enum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nestval()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\misc", "nestval.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tailjump()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\misc", "tailjump.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Boxing.@morph
    {
        [TestClass]
        public class @testclass_morph
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @sin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\morph", "sin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Boxing.@seh
    {
        [TestClass]
        public class @testclass_seh
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @try()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\seh", "try.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Boxing.@xlang
    {
        [TestClass]
        public class @testclass_xlang
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @sin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\xlang", "sin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sinlib()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Boxing\xlang", "sinlib.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@casts.@coverage
    {
        [TestClass]
        public class @testclass_coverage
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @castclass_call()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "castclass_call.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_ldarg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "castclass_ldarg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_ldloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "castclass_ldloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @castclass_newobj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "castclass_newobj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @isinst_call()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "isinst_call.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @isinst_ldarg()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "isinst_ldarg.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @isinst_ldloc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "isinst_ldloc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @isinst_newobj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\coverage", "isinst_newobj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@casts.@iface
    {
        [TestClass]
        public class @testclass_iface
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @iface1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\iface", "iface1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@casts.@ilseq
    {
        [TestClass]
        public class @testclass_ilseq
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @commonBase()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\ilseq", "commonBase.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@casts.@SEH
    {
        [TestClass]
        public class @testclass_SEH
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @cast_throw()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\SEH", "cast_throw.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throw()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\casts\SEH", "throw.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@cctor.@misc
    {
        [TestClass]
        public class @testclass_misc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @throw()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\misc", "throw.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@cctor.@misc.@Desktop
    {
        [TestClass]
        public class @testclass_Desktop
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @throw()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\misc\Desktop", "throw.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@cctor.@simple
    {
        [TestClass]
        public class @testclass_simple
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @precise1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\simple", "precise1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @precise1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\simple", "precise1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @precise2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\simple", "precise2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @precise4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\simple", "precise4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@cctor.@xassem
    {
        [TestClass]
        public class @testclass_xassem
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @testlib()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\xassem", "testlib.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @xprecise1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\xassem", "xprecise1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @xprecise1b()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\xassem", "xprecise1b.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @xprecise2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\xassem", "xprecise2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @xprecise4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\cctor\xassem", "xprecise4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Coverage
    {
        [TestClass]
        public class @testclass_Coverage
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @b433189()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Coverage", "b433189.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@divrem.@div
    {
        [TestClass]
        public class @testclass_div
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @decimaldiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "decimaldiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @i4div()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "i4div.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @i8div()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "i8div.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @negSignedMod()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "negSignedMod.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @overlddiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "overlddiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4div()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "r4div.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8div()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "r8div.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @u4div()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "u4div.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @u8div()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\div", "u8div.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@divrem.@rem
    {
        [TestClass]
        public class @testclass_rem
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @decimalrem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "decimalrem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @i4rem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "i4rem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @i8rem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "i8rem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @overldrem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "overldrem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4rem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "r4rem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8rem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "r8rem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @u4rem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "u4rem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @u8rem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\divrem\rem", "u8rem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@doublearray
    {
        [TestClass]
        public class @testclass_doublearray
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dblarray1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\doublearray", "dblarray1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dblarray2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\doublearray", "dblarray2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @dblarray4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\doublearray", "dblarray4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@dynamic_methods
    {
        [TestClass]
        public class @testclass_dynamic_methods
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @bug_445388()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\dynamic_methods", "bug_445388.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@basics
    {
        [TestClass]
        public class @testclass_basics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @multihandler()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "multihandler.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwincatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "throwincatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinclassconstructor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "throwinclassconstructor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "throwinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinallyerrpath()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "throwinfinallyerrpath.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinallyerrpathfn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "throwinfinallyerrpathfn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwoutside()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "throwoutside.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "trycatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatchtrycatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "trycatchtrycatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "tryfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryfinallytrycatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "tryfinallytrycatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryfinallytryfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "tryfinallytryfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trythrowcatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "trythrowcatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trythrowcatchfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\basics", "trythrowcatchfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@common
    {
        [TestClass]
        public class @testclass_common
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_common()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\common", "common.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@cs
    {
        [TestClass]
        public class @testclass_cs
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @unsafe()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\cs", "unsafe.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@finallyexec
    {
        [TestClass]
        public class @testclass_finallyexec
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @catchrettoinnertry()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "catchrettoinnertry.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @localgotoinahandler()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "localgotoinahandler.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @loopinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "loopinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nonlocalexittobeginningoftry()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "nonlocalexittobeginningoftry.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nonlocalgotoinatryblockinahandler()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "nonlocalgotoinatryblockinahandler.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simplenonlocalexit()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "simplenonlocalexit.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simplenonlocalexitnestedintrycatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "simplenonlocalexitnestedintrycatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @switchincatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "switchincatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryCatchFinallyThrow_nonlocalexit1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "tryCatchFinallyThrow_nonlocalexit1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryCatchFinallyThrow_nonlocalexit2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "tryCatchFinallyThrow_nonlocalexit2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryCatchFinallyThrow_nonlocalexit3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "tryCatchFinallyThrow_nonlocalexit3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryCatchFinallyThrow_nonlocalexit4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "tryCatchFinallyThrow_nonlocalexit4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryfinallythrow_nonlocalexit()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\finallyexec", "tryfinallythrow_nonlocalexit.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@generics
    {
        [TestClass]
        public class @testclass_generics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @throwincatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\generics", "throwincatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatchnestedtype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\generics", "trycatchnestedtype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatchsimpletype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\generics", "trycatchsimpletype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@interactions
    {
        [TestClass]
        public class @testclass_interactions
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ehSO()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\interactions", "ehSO.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcincatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\interactions", "gcincatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rangecheckinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\interactions", "rangecheckinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @switchinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\interactions", "switchinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @volatileFromFinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\interactions", "volatileFromFinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@leaves
    {
        [TestClass]
        public class @testclass_leaves
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @catchretnonlocalexitinfunclet()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\leaves", "catchretnonlocalexitinfunclet.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nonlocalexitfromnestedcatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\leaves", "nonlocalexitfromnestedcatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @oponerror()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\leaves", "oponerror.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tryfinallyloop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\leaves", "tryfinallyloop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@nested.@general
    {
        [TestClass]
        public class @testclass_general
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @cascadedcatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\general", "cascadedcatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @methodthrowsinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\general", "methodthrowsinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rethrowincatchnestedinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\general", "rethrowincatchnestedinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\general", "throwinfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinallynestedintry()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\general", "throwinfinallynestedintry.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinnestedfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\general", "throwinnestedfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatchintryfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\general", "trycatchintryfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@nested.@nonlocalexit
    {
        [TestClass]
        public class @testclass_nonlocalexit
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @throwinfinallynestedintry_30()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\nonlocalexit", "throwinfinallynestedintry_30.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinallyrecursive_20()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\nonlocalexit", "throwinfinallyrecursive_20.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwinfinally_50()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\nested\nonlocalexit", "throwinfinally_50.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@eh.@rethrow
    {
        [TestClass]
        public class @testclass_rethrow
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @rethrowinfinallyaftercatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\rethrow", "rethrowinfinallyaftercatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rethrowwithhandlerscatchingbase()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\rethrow", "rethrowwithhandlerscatchingbase.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @samerethrowtwice()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\rethrow", "samerethrowtwice.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @samethrowtwice()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\rethrow", "samethrowtwice.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @simplerethrow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\rethrow", "simplerethrow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwwithhandlerscatchingbase()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\eh\rethrow", "throwwithhandlerscatchingbase.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@explicit.@basic
    {
        [TestClass]
        public class @testclass_basic
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @refarg_c()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_c.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refarg_f4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_f4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refarg_f8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_f8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refarg_i1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_i1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refarg_i2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_i2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refarg_i4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_i4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refarg_o()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_o.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @refarg_s()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\basic", "refarg_s.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@explicit.@coverage
    {
        [TestClass]
        public class @testclass_coverage
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @body_byte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_byte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_double()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_double.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_float()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_float.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_int()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_int.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_long()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_long.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_obj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_obj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_byte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_byte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_double()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_double.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_float()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_float.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_int()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_int.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_long()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_long.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_obj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_obj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_short()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_short.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_safe_val()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_safe_val.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_short()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_short.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @body_val()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "body_val.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_byte_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_byte_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_double_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_double_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_float_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_float_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_byte_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_byte_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_double_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_double_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_float_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_float_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_int_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_int_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_long_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_long_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_obj_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_obj_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_short_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_short_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_gc_val_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_gc_val_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_int_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_int_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_long_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_long_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_obj_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_obj_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_short_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_short_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @expl_val_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "expl_val_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_byte_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_byte_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_double_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_double_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_float_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_float_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_byte_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_byte_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_double_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_double_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_float_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_float_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_int_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_int_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_long_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_long_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_obj_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_obj_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_short_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_short_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_gc_val_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_gc_val_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_int_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_int_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_long_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_long_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_obj_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_obj_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_short_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_short_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @seq_val_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\coverage", "seq_val_1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@explicit.@misc
    {
        [TestClass]
        public class @testclass_misc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @explicit1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @explicit2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @explicit3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @explicit4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @explicit5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @explicit6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @explicit7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @explicit8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\misc", "explicit8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@explicit.@rotate
    {
        [TestClass]
        public class @testclass_rotate
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @rotarg_double()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\rotate", "rotarg_double.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rotarg_float()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\rotate", "rotarg_float.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rotarg_objref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\rotate", "rotarg_objref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @rotarg_valref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\explicit\rotate", "rotarg_valref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@flowgraph.@bug614098
    {
        [TestClass]
        public class @testclass_bug614098
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @intToByte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug614098", "intToByte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@flowgraph.@bug619534
    {
        [TestClass]
        public class @testclass_bug619534
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ehCodeMotion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug619534", "ehCodeMotion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @finallyclone()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug619534", "finallyclone.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @moduleHandleCache()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug619534", "moduleHandleCache.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @moduleLibrary()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug619534", "moduleLibrary.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @twoEndFinallys()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug619534", "twoEndFinallys.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@flowgraph.@bug621705
    {
        [TestClass]
        public class @testclass_bug621705
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ptuple_lost()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug621705", "ptuple_lost.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@flowgraph.@bug647189
    {
        [TestClass]
        public class @testclass_bug647189
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ssa_tuIsAddr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\bug647189", "ssa_tuIsAddr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@flowgraph.@dev10_bug675304
    {
        [TestClass]
        public class @testclass_dev10_bug675304
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arrayDim()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug675304", "arrayDim.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @osrAddovershot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug675304", "osrAddovershot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@flowgraph.@dev10_bug679008
    {
        [TestClass]
        public class @testclass_dev10_bug679008
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @castClassEH()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug679008", "castClassEH.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GCOverReporting()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug679008", "GCOverReporting.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sealedCastVariance()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug679008", "sealedCastVariance.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @singleRefField()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug679008", "singleRefField.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @zeroInitStackSlot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug679008", "zeroInitStackSlot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@flowgraph.@dev10_bug723489
    {
        [TestClass]
        public class @testclass_dev10_bug723489
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @qMarkColon()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\flowgraph\dev10_bug723489", "qMarkColon.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@fp.@apps
    {
        [TestClass]
        public class @testclass_apps
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Ball()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\apps", "Ball.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BouncingBall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\apps", "BouncingBall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@fp.@exgen
    {
        [TestClass]
        public class @testclass_exgen
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @_1000w1d()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "1000w1d.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_10w250d()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "10w250d.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_10w5d()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "10w5d.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_200w1d_01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "200w1d-01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_200w1d_02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "200w1d-02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_3w1d_01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "3w1d-01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_3w1d_02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "3w1d-02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_5w1d_01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "5w1d-01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_5w1d_02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "5w1d-02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_5w1d_03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "5w1d-03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_5w1d_04()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "5w1d-04.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_5w1d_05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "5w1d-05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_5w1d_06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\fp\exgen", "5w1d-06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@FPtrunc
    {
        [TestClass]
        public class @testclass_FPtrunc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @convr4a()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\FPtrunc", "convr4a.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @convr8a()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\FPtrunc", "convr8a.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@inlining.@bug505642
    {
        [TestClass]
        public class @testclass_bug505642
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\inlining\bug505642", "test.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@int64.@arrays
    {
        [TestClass]
        public class @testclass_arrays
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @lcs_long()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\arrays", "lcs_long.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcs_ulong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\arrays", "lcs_ulong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@int64.@misc
    {
        [TestClass]
        public class @testclass_misc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @binop()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\misc", "binop.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @box()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\misc", "box.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@int64.@signed
    {
        [TestClass]
        public class @testclass_signed
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @s_addsub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_addsub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_ldc_div()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_ldc_div.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_ldc_mul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_ldc_mul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_ldc_mulovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_ldc_mulovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_ldfld_mul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_ldfld_mul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_ldfld_mulovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_ldfld_mulovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_ldsfld_mul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_ldsfld_mul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_ldsfld_mulovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_ldsfld_mulovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @s_muldiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\signed", "s_muldiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@int64.@superlong
    {
        [TestClass]
        public class @testclass_superlong
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_superlong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\superlong", "superlong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@int64.@unsigned
    {
        [TestClass]
        public class @testclass_unsigned
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @addsub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "addsub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ldc_mul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "ldc_mul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ldc_mulovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "ldc_mulovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ldfld_mul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "ldfld_mul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ldfld_mulovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "ldfld_mulovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ldsfld_mul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "ldsfld_mul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ldsfld_mulovf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "ldsfld_mulovf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @muldiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\int64\unsigned", "muldiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Invoke.@_25params
    {
        [TestClass]
        public class @testclass__25params
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @_25param1a()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\25params", "25param1a.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_25param2a()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\25params", "25param2a.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @_25param3a()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\25params", "25param3a.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Invoke.@callvirt
    {
        [TestClass]
        public class @testclass_callvirt
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\callvirt", "test1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Invoke.@ctor
    {
        [TestClass]
        public class @testclass_ctor
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @val_ctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\ctor", "val_ctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Invoke.@deep
    {
        [TestClass]
        public class @testclass_deep
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_deep()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\deep", "deep.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Invoke.@fptr
    {
        [TestClass]
        public class @testclass_fptr
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @recurse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\fptr", "recurse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Invoke.@implicit
    {
        [TestClass]
        public class @testclass_implicit
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @obj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\implicit", "obj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Invoke.@SEH
    {
        [TestClass]
        public class @testclass_SEH
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @catchfinally()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\SEH", "catchfinally.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @catchfinally_tail()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Invoke\SEH", "catchfinally_tail.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@jitinterface
    {
        [TestClass]
        public class @testclass_jitinterface
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @bug603649()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\jitinterface", "bug603649.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@MDArray.@basics
    {
        [TestClass]
        public class @testclass_basics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @classarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\basics", "classarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doublearr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\basics", "doublearr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @jaggedarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\basics", "jaggedarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\basics", "stringarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\basics", "structarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@MDArray.@DataTypes
    {
        [TestClass]
        public class @testclass_DataTypes
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @bool()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "bool.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @byte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "byte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @char()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "char.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @decimal()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "decimal.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @double()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "double.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @float()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "float.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @int()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "int.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @long()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "long.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sbyte()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "sbyte.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @short()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "short.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @uint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "uint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ulong()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "ulong.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ushort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\DataTypes", "ushort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@MDArray.@GaussJordan
    {
        [TestClass]
        public class @testclass_GaussJordan
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @classarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\GaussJordan", "classarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @jaggedarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\GaussJordan", "jaggedarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @plainarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\GaussJordan", "plainarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\GaussJordan", "structarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@MDArray.@InnerProd
    {
        [TestClass]
        public class @testclass_InnerProd
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @classarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\InnerProd", "classarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @doublearr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\InnerProd", "doublearr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @intarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\InnerProd", "intarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @jaggedarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\InnerProd", "jaggedarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @stringarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\InnerProd", "stringarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structarr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\MDArray\InnerProd", "structarr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@NaN
    {
        [TestClass]
        public class @testclass_NaN
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arithm32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "arithm32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @arithm64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "arithm64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4NaNadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r4NaNadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4NaNdiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r4NaNdiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4NaNmul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r4NaNmul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4NaNrem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r4NaNrem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r4NaNsub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r4NaNsub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8NaNadd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r8NaNadd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8NaNdiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r8NaNdiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8NaNmul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r8NaNmul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8NaNrem()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r8NaNrem.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @r8NaNsub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\NaN", "r8NaNsub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@nonvirtualcall
    {
        [TestClass]
        public class @testclass_nonvirtualcall
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @classic()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\nonvirtualcall", "classic.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @delegate()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\nonvirtualcall", "delegate.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @generics()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\nonvirtualcall", "generics.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @generics2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\nonvirtualcall", "generics2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @tailcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\nonvirtualcall", "tailcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @valuetype()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\nonvirtualcall", "valuetype.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@Overflow
    {
        [TestClass]
        public class @testclass_Overflow
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @FloatInfinitiesToInt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Overflow", "FloatInfinitiesToInt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @FloatOvfToInt2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\Overflow", "FloatOvfToInt2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@refany
    {
        [TestClass]
        public class @testclass_refany
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @array1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\refany", "array1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @array2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\refany", "array2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @format()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\refany", "format.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gcreport()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\refany", "gcreport.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\refany", "lcs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @native()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\refany", "native.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @virtcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\refany", "virtcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@stringintern
    {
        [TestClass]
        public class @testclass_stringintern
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @b207621()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\stringintern", "b207621.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\stringintern", "test1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\stringintern", "test2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\stringintern", "test4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @testgenstr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\stringintern", "testgenstr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @teststr()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\stringintern", "teststr.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@structs.@systemvbringup
    {
        [TestClass]
        public class @testclass_systemvbringup
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @structpasstest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\structs\systemvbringup", "structpasstest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structpasstest1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\structs\systemvbringup", "structpasstest1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structpinvoketests()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\structs\systemvbringup", "structpinvoketests.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @structrettest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\structs\systemvbringup", "structrettest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@tailcall.@Desktop
    {
        [TestClass]
        public class @testclass_Desktop
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @thread_race()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\tailcall\Desktop", "thread-race.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@tailcall_v4
    {
        [TestClass]
        public class @testclass_tailcall_v4
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @delegateParamCallTarget()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\tailcall_v4", "delegateParamCallTarget.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@unsafecsharp
    {
        [TestClass]
        public class @testclass_unsafecsharp
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @main()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "main.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unsafe_0()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "unsafe-0.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unsafe_1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "unsafe-1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unsafe_2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "unsafe-2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unsafe_3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "unsafe-3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unsafe_4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "unsafe-4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unsafe_5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "unsafe-5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unsafe_6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\unsafecsharp", "unsafe-6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@VT.@callconv
    {
        [TestClass]
        public class @testclass_callconv
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @call()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\callconv", "call.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @jumper()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\callconv", "jumper.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @jumps()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\callconv", "jumps.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @vtret()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\callconv", "vtret.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@VT.@etc
    {
        [TestClass]
        public class @testclass_etc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ctor_recurse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "ctor_recurse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @gc_nested()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "gc_nested.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @han2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "han2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @han3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "han3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @han3_ctor()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "han3_ctor.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @han3_ref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "han3_ref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @hanoi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "hanoi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @knight()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "knight.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @nested()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\etc", "nested.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@VT.@identity
    {
        [TestClass]
        public class @testclass_identity
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @accum()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\identity", "accum.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @vcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\identity", "vcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@VT.@port
    {
        [TestClass]
        public class @testclass_port
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @lcs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\port", "lcs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @lcs_gcref()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\VT\port", "lcs_gcref.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@xxobj.@operand
    {
        [TestClass]
        public class @testclass_operand
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @refanyval()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\xxobj\operand", "refanyval.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @unbox()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\xxobj\operand", "unbox.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Methodical.@xxobj.@sizeof
    {
        [TestClass]
        public class @testclass_sizeof
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @sizeof32()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\xxobj\sizeof", "sizeof32.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @sizeof64()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Methodical\xxobj\sizeof", "sizeof64.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@opt.@AssertionPropagation
    {
        [TestClass]
        public class @testclass_AssertionPropagation
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ConstantProp()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "ConstantProp.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CopyProp()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "CopyProp.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NullCheckAssertion1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "NullCheckAssertion1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NullCheckAssertion2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "NullCheckAssertion2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NullCheckAssertion3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "NullCheckAssertion3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NullCheckAssertion4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "NullCheckAssertion4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NullCheckAssertion5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "NullCheckAssertion5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NullCheckAssertion6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "NullCheckAssertion6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @NullCheckAssertion7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "NullCheckAssertion7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @TypeOfAssertion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\AssertionPropagation", "TypeOfAssertion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@opt.@Inline
    {
        [TestClass]
        public class @testclass_Inline
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @args1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "args1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @args2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "args2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @args3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "args3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @array()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "array.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ArrayOfStructs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "ArrayOfStructs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @debug()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "debug.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @deepcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "deepcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DelegInstanceFtn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "DelegInstanceFtn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DelegStaticFtn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "DelegStaticFtn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GenericStructs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "GenericStructs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ifelse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "ifelse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @indexer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "indexer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @inline()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "inline.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @InlineThrow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "InlineThrow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_DelegateStruct()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_DelegateStruct.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_GenericMethods()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_GenericMethods.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_Handler()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_Handler.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @inline_Many()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "inline_Many.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_MultipleReturn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_MultipleReturn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_NewObj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_NewObj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_NormalizeStack()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_NormalizeStack.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @inline_Recursion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "inline_Recursion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_RecursiveMethod()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_RecursiveMethod.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_RecursiveMethod21()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_RecursiveMethod21.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_SideAffects()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_SideAffects.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_STARG()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_STARG.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_Vars()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Inline_Vars.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interfaceCall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "interfaceCall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interfaceProperty()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "interfaceProperty.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathfunc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "mathfunc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mthdimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "mthdimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @property()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "property.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ReturnStruct_Method()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "ReturnStruct_Method.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @size()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "size.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructAsParam_Method()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "StructAsParam_Method.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructInClass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "StructInClass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Struct_Opcodes()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "Struct_Opcodes.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwTest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "throwTest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline", "trycatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@opt.@Inline.@tests
    {
        [TestClass]
        public class @testclass_tests
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @args1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "args1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @args2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "args2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @args3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "args3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @array()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "array.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ArrayOfStructs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "ArrayOfStructs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @debug()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "debug.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @deepcall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "deepcall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DelegInstanceFtn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "DelegInstanceFtn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DelegStaticFtn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "DelegStaticFtn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @GenericStructs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "GenericStructs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ifelse()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "ifelse.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @indexer()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "indexer.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inlinethrow()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inlinethrow.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_DelegateStruct()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_DelegateStruct.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_GenericMethods()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_GenericMethods.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_handler()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_handler.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_Many()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_Many.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_MultipleReturn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_MultipleReturn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_NewObj()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_NewObj.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_NormalizeStack()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_NormalizeStack.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_Recursion()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_Recursion.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_RecursiveMethod()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_RecursiveMethod.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_RecursiveMethod21()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_RecursiveMethod21.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_SideAffects()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_SideAffects.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_STARG()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_STARG.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Inline_Vars()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "Inline_Vars.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interfaceCall()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "interfaceCall.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @interfaceProperty()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "interfaceProperty.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mathfunc()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "mathfunc.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @mthdimpl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "mthdimpl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @property()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "property.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ReturnStruct_Method()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "ReturnStruct_Method.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @size()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "size.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructAsParam_Method()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "StructAsParam_Method.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StructInClass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "StructInClass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @struct_opcodes()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "struct_opcodes.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @throwTest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "throwTest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @trycatch()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\Inline\tests", "trycatch.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@opt.@perf.@doublealign
    {
        [TestClass]
        public class @testclass_doublealign
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @arrays()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\perf\doublealign", "arrays.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @locals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\perf\doublealign", "locals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @objects()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\perf\doublealign", "objects.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@opt.@virtualstubdispatch.@bigvtbl
    {
        [TestClass]
        public class @testclass_bigvtbl
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_bigvtbl()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\bigvtbl", "bigvtbl.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@opt.@virtualstubdispatch.@manyintf
    {
        [TestClass]
        public class @testclass_manyintf
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ctest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "ctest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest10()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest10.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @itest9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\manyintf", "itest9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@opt.@virtualstubdispatch.@mixed
    {
        [TestClass]
        public class @testclass_mixed
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_mixed()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\opt\virtualstubdispatch\mixed", "mixed.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@_8Queens
    {
        [TestClass]
        public class @testclass__8Queens
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test__8Queens()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\8Queens", "8Queens.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@Ackermann
    {
        [TestClass]
        public class @testclass_Ackermann
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_Ackermann()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\Ackermann", "Ackermann.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@AddArray
    {
        [TestClass]
        public class @testclass_AddArray
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_AddArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\AddArray", "AddArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@Array2
    {
        [TestClass]
        public class @testclass_Array2
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_Array2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\Array2", "Array2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@BubbleSort
    {
        [TestClass]
        public class @testclass_BubbleSort
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_BubbleSort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\BubbleSort", "BubbleSort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@BubbleSort2
    {
        [TestClass]
        public class @testclass_BubbleSort2
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_BubbleSort2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\BubbleSort2", "BubbleSort2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@Fib
    {
        [TestClass]
        public class @testclass_Fib
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_Fib()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\Fib", "Fib.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@HeapSort
    {
        [TestClass]
        public class @testclass_HeapSort
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_HeapSort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\HeapSort", "HeapSort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@IniArray
    {
        [TestClass]
        public class @testclass_IniArray
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_IniArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\IniArray", "IniArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@LogicArray
    {
        [TestClass]
        public class @testclass_LogicArray
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_LogicArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\LogicArray", "LogicArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@Midpoint
    {
        [TestClass]
        public class @testclass_Midpoint
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_Midpoint()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\Midpoint", "Midpoint.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@MulMatrix
    {
        [TestClass]
        public class @testclass_MulMatrix
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_MulMatrix()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\MulMatrix", "MulMatrix.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@Pi
    {
        [TestClass]
        public class @testclass_Pi
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_Pi()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\Pi", "Pi.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@QuickSort
    {
        [TestClass]
        public class @testclass_QuickSort
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_QuickSort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\QuickSort", "QuickSort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@TreeSort
    {
        [TestClass]
        public class @testclass_TreeSort
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_TreeSort()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\TreeSort", "TreeSort.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@BenchI.@XposMatrix
    {
        [TestClass]
        public class @testclass_XposMatrix
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_XposMatrix()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\BenchI\XposMatrix", "XposMatrix.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@FractalPerf
    {
        [TestClass]
        public class @testclass_FractalPerf
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_FractalPerf()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\FractalPerf", "FractalPerf.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@Performance.@CodeQuality.@SIMD.@ConsoleMandel
    {
        [TestClass]
        public class @testclass_ConsoleMandel
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @Abstractions()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "Abstractions.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test_ConsoleMandel()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "ConsoleMandel.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Interfaces()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "Interfaces.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ScalarDouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "ScalarDouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ScalarFloat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "ScalarFloat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorDouble()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "VectorDouble.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorDoubleStrict()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "VectorDoubleStrict.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorFloat()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "VectorFloat.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorFloatStrict()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "VectorFloatStrict.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorHelpers()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\Performance\CodeQuality\SIMD\ConsoleMandel", "VectorHelpers.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@RyuJIT
    {
        [TestClass]
        public class @testclass_RyuJIT
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @rCopyProp1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\RyuJIT", "rCopyProp1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @JIT.@SIMD
    {
        [TestClass]
        public class @testclass_SIMD
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @AbsGeneric()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "AbsGeneric.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AbsSqrt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "AbsSqrt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @AddingSequence()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "AddingSequence.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BitwiseOperations()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "BitwiseOperations.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BoxUnbox()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "BoxUnbox.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @BugWithAVX()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "BugWithAVX.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CircleInConvex()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "CircleInConvex.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CreateGeneric()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "CreateGeneric.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @CtorFromArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "CtorFromArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Ctors()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Ctors.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @DivSignedUnsignedTest()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "DivSignedUnsignedTest.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Dup()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Dup.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Haar_likeFeaturesGeneric()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Haar-likeFeaturesGeneric.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Ldfld()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Ldfld.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @LdfldGeneric()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "LdfldGeneric.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Ldind()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Ldind.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @MinMax()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "MinMax.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Mul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Mul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @SqrtGeneric()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "SqrtGeneric.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @StoreElement()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "StoreElement.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Sums()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Sums.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Vector3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Vector3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @Vector4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "Vector4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorAbs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorAbs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorAdd()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorAdd.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorArgs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorArgs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorArrayInit()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorArrayInit.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorCopyToArray()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorCopyToArray.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorDiv()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorDiv.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorDot()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorDot.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorExp()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorExp.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorGet()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorGet.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorHWAccel()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorHWAccel.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorHWAccel2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorHWAccel2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorInit()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorInit.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorInitN()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorInitN.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorIntEquals()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorIntEquals.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorMatrix()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorMatrix.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorMax()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorMax.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorMin()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorMin.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorMul()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorMul.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorRelOp()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorRelOp.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorReturn()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorReturn.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorSet()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorSet.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorSqrt()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorSqrt.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorSub()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorSub.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorUnused()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorUnused.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @VectorUtil()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"JIT\SIMD", "VectorUtil.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@binding.@assemblies.@assemblybugs.@_102140
    {
        [TestClass]
        public class @testclass__102140
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\assemblybugs\102140", "test.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@binding.@assemblies.@assemblybugs.@_177066w
    {
        [TestClass]
        public class @testclass__177066w
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @repro177066()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\assemblybugs\177066w", "repro177066.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@binding.@assemblies.@assemblybugs.@_203962w
    {
        [TestClass]
        public class @testclass__203962w
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @client()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\assemblybugs\203962w", "client.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@binding.@assemblies.@assemblyversion
    {
        [TestClass]
        public class @testclass_assemblyversion
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @embedstringversions()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\assemblyversion", "embedstringversions.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@binding.@assemblies.@basicapi.@assemblynamector
    {
        [TestClass]
        public class @testclass_assemblynamector
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @properties()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\basicapi\assemblynamector", "properties.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @server1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\basicapi\assemblynamector", "server1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @server2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\basicapi\assemblynamector", "server2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @server3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\basicapi\assemblynamector", "server3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@binding.@assemblies.@generics.@arilistienum.@methods
    {
        [TestClass]
        public class @testclass_methods
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @exceptions()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\generics\arilistienum\methods", "exceptions.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test_methods()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\binding\assemblies\generics\arilistienum\methods", "methods.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@classloader.@explicitlayout.@misc
    {
        [TestClass]
        public class @testclass_misc
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @derivedexplicitclass()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\misc", "derivedexplicitclass.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@classloader.@explicitlayout.@objrefandnonobjrefoverlap
    {
        [TestClass]
        public class @testclass_objrefandnonobjrefoverlap
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @case1()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case1.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case11()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case11.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case12()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case12.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case14()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case14.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case15()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case15.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case2()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case2.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case3()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case3.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case4()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case4.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case5()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case5.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case6()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case6.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case7()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case7.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case8()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case8.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @case9()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\explicitlayout\objrefandnonobjrefoverlap", "case9.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@classloader.@nesting.@coreclr
    {
        [TestClass]
        public class @testclass_coreclr
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @vsw491577()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\classloader\nesting\coreclr", "vsw491577.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@multimodule
    {
        [TestClass]
        public class @testclass_multimodule
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @dontusenetmodule()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\multimodule", "dontusenetmodule.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@NativeLibs
    {
        [TestClass]
        public class @testclass_NativeLibs
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @FromNativePaths()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\NativeLibs", "FromNativePaths.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Loader.@versioning.@coverage
    {
        [TestClass]
        public class @testclass_coverage
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @assemblyattrs()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Loader\versioning\coverage", "assemblyattrs.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @managed.@Compilation
    {
        [TestClass]
        public class @testclass_Compilation
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @test_Compilation()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"managed\Compilation", "Compilation.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @HelloWorld()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"managed\Compilation", "HelloWorld.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @readytorun
    {
        [TestClass]
        public class @testclass_readytorun
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @main()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"readytorun", "main.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @test()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"readytorun", "test.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }

    }

    namespace @Threading.@ThreadStatics
    {
        [TestClass]
        public class @testclass_ThreadStatics
        {
            [TestInitialize]
            [Timeout(36000000)]
            public void Initialize()
            {
                CompilerHelper.AssertUiEnabled(false); CompilerHelper.DownloadTestsAndBuildCoreLib("coreclr");
            }

            [TestCleanup]
            public void Cleanup()
            {
                CompilerHelper.AssertUiEnabled(true);
            }

            [TestMethod]
            public void @ThreadStatic01()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Threading\ThreadStatics", "ThreadStatic01.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ThreadStatic02()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Threading\ThreadStatics", "ThreadStatic02.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ThreadStatic03()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Threading\ThreadStatics", "ThreadStatic03.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ThreadStatic05()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Threading\ThreadStatics", "ThreadStatic05.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

            [TestMethod]
            public void @ThreadStatic06()
            {
                var file = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Threading\ThreadStatics", "ThreadStatic06.cs");
                var testfolder = Path.Combine(CompilerHelper.CoreCLRSourcePath, @"Common\CoreCLRTestLibrary");
                CompilerHelper.CompileAndRun(Path.GetFileNameWithoutExtension(file), Path.GetDirectoryName(file) + "\\", false, true, returnCode: 100, additionalFilesFolder: testfolder, additionalFilesPattern: new[] { "*.cs" });
            }

        }
    }
}

